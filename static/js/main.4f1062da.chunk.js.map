{"version":3,"sources":["components/input-playername/index.tsx","components/logo/index.tsx","components/custom-button/index.tsx","components/menu-button/index.tsx","components/menu-button-container/index.tsx","services/login.ts","services/network.ts","enums.ts","pages/menu/index.tsx","pages/lobby/index.tsx","services/channels.ts","components/square/index.tsx","components/board/index.tsx","utils.ts","components/hud/index.tsx","components/interactive-status-container/index.tsx","pages/game/index.tsx","routes.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["InputPlayername","props","className","placeholder","type","id","name","value","onChange","handleChange","spellCheck","Logo","style","backgroundColor","color","foregroundColor","CustomButton","onClick","text","MenuButton","width","animate","shouldResetWidth","roomName","handleOnChange","required","MenuButtonContainer","useState","index","toggleIndex","setGameMode","idx","mode","console","log","handleModeChange","onSubmit","confirm","PLAYER_ID","String","Math","floor","random","socket","Socket","params","playerId","connect","MESSAGE_TYPE","NOTICE_BOARD_STATUS","GAMESTATE","Menu","history","useHistory","gameMode","setRoomName","searching","setSearching","playerCount","setPlayerCount","localStorage","getItem","setName","useLoading","loading","indicator","indicatorEl","containerProps","e","target","setItem","gameData","matchmakerChannel","matchmakerChannelName","maxPlayer","gameName","matchData","matchId","channel","player_count","room_name","match_id","connectToMatchmakerChannel","join","receive","resp","on","message","gameChannelData","leave","push","pathname","state","playerName","preventDefault","Lobby","network","Square","sign","canMove","gameChannel","movedata","pos","Board","board","winPattern","values","i","map","list","indexOf","HUD","balance","bet","gameState","balanceStyle","BETTING","GAMEOVER","display","toLocaleUpperCase","padStart","InteractiveStatusContainer","boardType","canClick","handlePlaceBetValueInput","placeBet","inputBoardStyle","noticeBoardStyle","btnStyle","btnColorStyle","btnText","NOTICE","msg","WAITING_FOR_OPPONENT_BET","lang","en","waiting_for_op_bet","YOUR_MOVE","move","OPPONENT_MOVE","waiting_for_op_move","YOU_WON","you_won","YOU_LOST","you_lost","min","Game","location","useLocation","playerBetValue","setPlayerBetValue","noticeBoardStatus","setNoticeBoardStatus","PLACE_BET","messageType","setMessageType","setGameState","playerBalanceValue","setPlayerBalanceValue","canInputBet","setCanInputBet","setBoard","opponentBetValue","setOpponentBetValue","opponentBalanceValue","setOpponentBalanceValue","opponentName","setOpponentName","setWinPattern","useEffect","matchmakerChannelMessage","connectToGameChannel","gamestate","player_1","player_2","p1","p2","turn","MOVING","MOVE_WAITING","newBoard","val","pattern","winner","BET_WAITING","event","Number","betdata","Routes","exact","path","component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4f1062da.chunk.js","sourcesContent":["import React, { ChangeEvent } from 'react';\nimport \"./style.css\"\n\ntype TInputPlayername = {\n    value: string,\n    handleChange: (event: ChangeEvent<HTMLInputElement>) => void\n}\n\nconst InputPlayername:React.FC<TInputPlayername> = (props) => {\n    return (\n        <div className=\"input-playername\">\n            {<input className=\"pname-input-field\" placeholder={\"your name\"} type=\"text\" id=\"fname\" name=\"fname\" value={props.value} onChange={props.handleChange} spellCheck=\"false\"/>}\n        </div>\n    );\n};\n\nexport default InputPlayername;","import React from 'react';\nimport \"./style.css\"\n\ntype TLogo = {\n    backgroundColor: string,\n    foregroundColor: string\n}\n\nconst Logo:React.FC<TLogo> = (props) => {\n    return (\n        <div className=\"logo\">\n            <div className=\"background\" style={{backgroundColor: props.backgroundColor}}>\n                <div className=\"foreground\"  style={{color: props.foregroundColor}}>\n                    <div className=\"logo-square top left\">B</div>\n                    <div className=\"logo-square top c\">E</div>\n                    <div className=\"logo-square top right\">T</div>\n\n                    <div className=\"logo-square m left\">T</div>\n                    <div className=\"logo-square m c\">A</div>\n                    <div className=\"logo-square m right\">C</div>\n\n                    <div className=\"logo-square bottom left\">T</div>\n                    <div className=\"logo-square bottom c\">O</div>\n                    <div className=\"logo-square bottom right\">E</div>\n                </div>\n\n            </div>\n\n        </div>\n    );\n};\n\nexport default Logo;","import React, { FormEvent } from \"react\";\nimport \"./style.css\";\n\ntype TCustomButton = {\n    text: string;\n    onClick: () => void;\n    backgroundColor?: string\n};\n\nconst CustomButton: React.FC<TCustomButton> = (props) => {\n    return (\n        <div className=\"custom-button\">\n            <button className=\"btn\" onClick={props.onClick} style={{backgroundColor: props.backgroundColor||\"#e5e5e5\"}}>\n                {props.text}{\" \"}\n            </button>\n        </div>\n    );\n};\n\nexport default CustomButton;\n","import React, { useState } from \"react\";\nimport CustomButton from \"../custom-button\";\nimport \"./style.css\";\n\ntype TMenuButton = {\n\ttext: string;\n\tonClick: () => void;\n    animate?: boolean;\n    confirm?:boolean\n\tshouldResetWidth: boolean;\n\thandleOnChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n\troomName: string;\n};\n\nconst MenuButton: React.FC<TMenuButton> = (props) => {\n\tconst placeholderText: string = \"Enter room name\";\n\n\treturn (\n\t\t<div className=\"menu-button\">\n\t\t\t<div\n\t\t\t\tclassName=\"input-component\"\n\t\t\t\tstyle={{\n\t\t\t\t\twidth: !props.animate\n\t\t\t\t\t\t? \"0%\"\n\t\t\t\t\t\t: props.shouldResetWidth\n\t\t\t\t\t\t? \"0%\"\n\t\t\t\t\t\t: \"70%\",\n                }}\n                \n\t\t\t>\n\t\t\t\t<input\n\t\t\t\t\tclassName=\"rname-input-field\"\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tid={props.text}\n\t\t\t\t\tplaceholder={placeholderText}\n\t\t\t\t\tvalue={props.roomName}\n\t\t\t\t\tonChange={props.handleOnChange}\n\t\t\t\t\tspellCheck=\"false\"\n                    required\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div\n\t\t\t\tclassName=\"btn-component\"\n\t\t\t\tstyle={{\n\t\t\t\t\twidth: !props.animate\n\t\t\t\t\t\t? \"100%\"\n\t\t\t\t\t\t: props.shouldResetWidth\n\t\t\t\t\t\t? \"100%\"\n\t\t\t\t\t\t: \"30%\",\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<CustomButton\n\t\t\t\t\ttext={\n\t\t\t\t\t\t!props.animate\n\t\t\t\t\t\t\t?  props.shouldResetWidth? props.text:\"CONFIRM ?\"\n\t\t\t\t\t\t\t: props.shouldResetWidth\n\t\t\t\t\t\t\t? props.text\n\t\t\t\t\t\t\t: \"GO\"\n\t\t\t\t\t}\n\n                    onClick={ props.shouldResetWidth\n\t\t\t\t\t\t\t? () => {}\n\t\t\t\t\t\t\t: props.onClick\n\t\t\t\t\t}\n\t\t\t\t\tbackgroundColor={\n\t\t\t\t\t\tprops.shouldResetWidth\n\t\t\t\t\t\t? \"\"\n\t\t\t\t\t\t: \"#ffd369\"}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default MenuButton;\n","import React, { useState } from \"react\";\nimport MenuButton from \"../menu-button\";\nimport \"./style.css\";\n\ntype TMenuButtonContainer = {\n\tonSubmit: () => void;\n\thandleOnChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n\troomName: string;\n\thandleModeChange: (gameMode: string) => void;\n};\n\nconst MenuButtonContainer: React.FC<TMenuButtonContainer> = (props) => {\n    const [index, toggleIndex] = useState(0);\n    \n\tconst setGameMode = (idx: number, mode: string) => {\n    console.log(\"DSB ~ file: index.tsx ~ line 16 ~ setGameMode ~ mode\", mode);\n\t\tprops.handleModeChange(mode);\n\t\ttoggleIndex(idx);\n\t};\n\n\treturn (\n\t\t<div className=\"menu-button-container\">\n\t\t\t<div style={{ width: \"262px\" }}>\n\t\t\t\t<div onClick={() => setGameMode(1, \"create\")}>\n\t\t\t\t\t<MenuButton\n\t\t\t\t\t\tonClick={props.onSubmit}\n\t\t\t\t\t\ttext={\"CREATE ROOM\"}\n\t\t\t\t\t\tanimate\n\t\t\t\t\t\tshouldResetWidth={index !== 1}\n\t\t\t\t\t\thandleOnChange={props.handleOnChange}\n\t\t\t\t\t\troomName={props.roomName}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div onClick={() => setGameMode(2, \"join\")}>\n\t\t\t\t\t<MenuButton\n\t\t\t\t\t\tonClick={props.onSubmit}\n\t\t\t\t\t\ttext={\"JOIN ROOM\"}\n\t\t\t\t\t\tanimate\n\t\t\t\t\t\tshouldResetWidth={index !== 2}\n\t\t\t\t\t\thandleOnChange={props.handleOnChange}\n\t\t\t\t\t\troomName={props.roomName}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div onClick={() => setGameMode(3, \"default\")}>\n\t\t\t\t\t<MenuButton\n\t\t\t\t\t\tonClick={props.onSubmit}\n\t\t\t\t\t\ttext={\"RANDOM ROOM\"}\n\t\t\t\t\t\tshouldResetWidth={index !== 3}\n\t\t\t\t\t\thandleOnChange={props.handleOnChange}\n                        roomName={props.roomName}\n                        confirm\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default MenuButtonContainer;\n","export const PLAYER_ID = String(Math.floor(Math.random() * 100000 ))\nexport const GAME_NAME = \"btt\"","import { Socket } from \"phoenix\";\nimport { GAME_NAME, PLAYER_ID } from \"./login\";\n\nexport type TMatchmakerChannelOptions = {\n\tplayerCount: number;\n\troomName: string;\n\tmatchId: string;\n\tgameMode: string;\n};\n\nexport type TMatchData = {\n\tplayerCount: number;\n\troomName: string;\n\tgameMode: string;\n};\n\nconsole.log(\"connecting to btt server ....\");\nconst socket: Socket = new Socket(\"ws://localhost:4000/socket\", {\n\t// const socket: Socket = new Socket(\"wss://still-plains-97814.herokuapp.com/socket\", {\n\tparams: { playerId: PLAYER_ID },\n});\nsocket.connect();\n\n// const channel: Channel = socket.channel(\"room:home\", {});\n\nconst connectToMatchmakerChannel = (gameData: TMatchData) => {\n\tconsole.log(\n\t\t\"DSB ~ file: network.ts ~ line 27 ~ connectToMatchmakerChannel ~ gameData\",\n\t\tgameData\n\t);\n\tlet matchmakerChannelName: string = \"\";\n\tlet maxPlayer = gameData.playerCount;\n\tlet matchId: string = \"\";\n\tlet gameName: string = GAME_NAME;\n\tswitch (gameData.gameMode) {\n\t\tcase \"default\":\n\t\t\tif (gameData.roomName) {\n\t\t\t\tmatchmakerChannelName = `garuda_matchmaker:${gameData.roomName}:${gameName}:${maxPlayer}`;\n\t\t\t\tmatchId = gameData.roomName;\n\t\t\t} else {\n\t\t\t\tmatchmakerChannelName = `garuda_matchmaker:${gameName}:${maxPlayer}`;\n\t\t\t\tmatchId = \"\";\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"create\":\n\t\t\tmatchmakerChannelName = `garuda_matchmaker:${gameData.roomName}:${gameName}:createjoin`;\n\t\t\tmatchId = gameData.roomName;\n\t\t\tbreak;\n\t\tcase \"join\":\n\t\t\tmatchmakerChannelName = `garuda_matchmaker:${gameData.roomName}:${gameName}:createjoin`;\n\t\t\tmatchId = gameData.roomName;\n\t\t\tmaxPlayer = -1;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t}\n\tlet matchData: TMatchmakerChannelOptions = {\n\t\troomName: matchmakerChannelName,\n\t\tplayerCount: maxPlayer,\n\t\tmatchId: gameData.roomName,\n\t\tgameMode: gameData.gameMode,\n\t};\n\n\tlet channel = socket.channel(matchmakerChannelName, {\n\t\tplayer_count: matchData.playerCount,\n\t\troom_name: matchData.roomName,\n\t\tmatch_id: matchData.matchId,\n\t\tmode: matchData.gameMode,\n\t});\n\treturn channel;\n};\n\nconst connectToGameChannel = (matchmakerChannelMessage: any, name: string) => {\n\tconsole.log(\n\t\t\"DSB ~ file: network.ts ~ line 71 ~ connectToGameChannel ~ matchmakerChannelMessage\",\n\t\tmatchmakerChannelMessage\n\t);\n\tlet matchId = matchmakerChannelMessage[\"match_id\"];\n\tlet gameName = GAME_NAME;\n\tlet gameChannel = socket.channel(`${gameName}:${matchId}`, { name });\n\treturn gameChannel;\n};\n\nexport { socket, connectToMatchmakerChannel, connectToGameChannel };\n","export enum MESSAGE_TYPE{\n    PLACE_BET,\n    WAITING_FOR_OPPONENT_BET,\n    OPPONENT_MOVE,\n    YOUR_MOVE,\n    YOU_WON,\n    YOU_LOST,\n    NONE\n}\n\nexport enum NOTICE_BOARD_STATUS{\n    BETTING,\n    NOTICE,\n    GAMEOVER\n}\n\nexport enum GAMESTATE{\n    BETTING,\n    BET_WAITING,\n    MOVE_WAITING,\n    MOVING,\n    GAMEOVER\n}\n\n// export const message = {\n//     PLACE_BET: \"PLACE YOUR BETS\"\n//     WAITING_FOR_OPPONENT_BET: \"WAITING FOR \",\n//     OPPONENT_MOVE,\n//     YOUR_MOVE,\n//     YOU_WON,\n//     YOU_LOST\n// }","import { Channel } from \"phoenix\";\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useLoading, Grid } from \"@agney/react-loading\";\n\nimport CustomButton from \"../../components/custom-button\";\nimport InputPlayername from \"../../components/input-playername\";\nimport Logo from \"../../components/logo\";\nimport MenuButton from \"../../components/menu-button\";\nimport MenuButtonContainer from \"../../components/menu-button-container\";\nimport { PLAYER_ID } from \"../../services/login\";\nimport {\n\tconnectToGameChannel,\n\tconnectToMatchmakerChannel,\n\tTMatchData,\n} from \"../../services/network\";\n\nimport \"./style.css\";\n\nconst Menu = () => {\n\tconst history = useHistory();\n\tconst [gameMode, setGameMode] = useState(\"\");\n\tconst [roomName, setRoomName] = useState(\"\");\n\tconst [searching, setSearching] = useState(false);\n\tconst [playerCount, setPlayerCount] = useState(2);\n\tconst [name, setName] = useState(localStorage.getItem(\"btt-name\") || String(PLAYER_ID));\n\n\tconst { containerProps, indicatorEl } = useLoading({\n\t\tloading: true,\n\t\t//@ts-ignore\n\t\tindicator: <Grid width=\"50\" />,\n\t});\n\n\tconst goToGame = (gameChannelData: any) => {\n\t\thistory.push({\n\t\t\tpathname: \"/game\",\n\t\t\tstate: { gameChannelData, playerName: name },\n\t\t});\n\t};\n\n\tconst onSetGameMode = (mode?: string) => {\n\t\tsetRoomName(\"\");\n\t\tsetPlayerCount(2);\n\t\tsetGameMode(mode ? mode : \"default\");\n\t};\n\n\tconst handleRoomNameChange: (\n\t\tevent: React.ChangeEvent<HTMLInputElement>\n\t) => void = (e) => {\n\t\te.preventDefault();\n\t\tsetRoomName(e.target.value);\n\t};\n\n\tconst handlePlayerNameChange: (\n\t\tevent: React.ChangeEvent<HTMLInputElement>\n\t) => void = (e) => {\n\t\tsetName(e.target.value);\n\t\tlocalStorage.setItem(\"btt-name\", e.target.value);\n\t};\n\n\tconst requestStartGame = () => {\n\t\tlet gameData: TMatchData = {\n\t\t\troomName,\n\t\t\tplayerCount,\n\t\t\tgameMode: gameMode || \"default\",\n\t\t};\n\n\t\tif (gameData.gameMode !== \"default\" && !roomName) {\n\t\t\treturn;\n\t\t}\n\n\t\tsetSearching(true);\n\n\t\tlet matchmakerChannel = connectToMatchmakerChannel(gameData);\n\t\tmatchmakerChannel.join().receive(\"ok\", (resp) => {\n\t\t\tconsole.log(\"Joined matchmaker\", resp);\n\t\t\treturn \"ok\";\n\t\t});\n\n\t\tmatchmakerChannel.on(\"match_maker_event\", (message) => {\n\t\t\tconsole.log(\"On match maker event\", message);\n\t\t\tmatchmakerChannel.leave();\n\t\t\tgoToGame(message);\n\t\t});\n\n\t\tmatchmakerChannel.on(\"presence_state\", (message) => {\n\t\t\tconsole.log(\"Presence\", message);\n\t\t});\n\t};\n\n\treturn (\n\t\t<div className=\"menu\">\n\t\t\t<Logo backgroundColor={\"#ffd369\"} foregroundColor={\"#393e46\"} />\n\n\t\t\t<InputPlayername\n\t\t\t\tvalue={name}\n\t\t\t\thandleChange={handlePlayerNameChange}\n\t\t\t/>\n\t\t\t{searching ? (\n\t\t\t\t<div className=\"searching\">\n\t\t\t\t\tSEARCHING...\n\t\t\t\t\t<div>{indicatorEl}</div>\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\t<MenuButtonContainer\n\t\t\t\t\tonSubmit={requestStartGame}\n\t\t\t\t\thandleModeChange={onSetGameMode}\n\t\t\t\t\troomName={roomName}\n\t\t\t\t\thandleOnChange={handleRoomNameChange}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default Menu;\n","import React from 'react';\n\nconst Lobby = () => {\n    return (\n        <div>\n            Lobby\n        </div>\n    );\n};\n\nexport default Lobby;","import { Channel } from \"phoenix\";\ninterface INetworkObject {\n    gameChannel?: Channel,\n}\n\nconst network: INetworkObject = {}\n\nexport { network }","import React from 'react';\nimport { network } from '../../services/channels';\nimport \"./style.css\"\n\ntype TSquare = {\n    sign: string,\n    index: number,\n    canMove: boolean\n    backgroundColor: string\n}\n\nconst Square:React.FC<TSquare> = (props) => {\n    const {sign, index, canMove, backgroundColor} = props\n    \n    const sendMove = () => {\n        canMove && network.gameChannel?.push(\"move\",{movedata: { pos: index}})\n    }\n    return (\n        <div className=\"square\" onClick={sendMove} style={{backgroundColor: backgroundColor}}>\n            <div className=\"sign\">\n            {sign!==\"0\"?sign:\"\"}\n            </div>\n        </div>\n    );\n};\n\nexport default Square;","import React from 'react';\nimport { listContains } from '../../utils';\nimport Square from '../square';\nimport \"./style.css\"\n\ntype TBoard = {\n    board: (string|number)[],\n    winPattern: number[],\n    canMove: boolean\n}\n\nconst Board:React.FC<TBoard> = (props) => {\n    const {board, winPattern, canMove} = props\n    let values = []\n    for(let i=1; i <= 9; i++){\n        values.push(i)\n    }\n    return (\n        <div className = \"board\">\n            {\n            values\n            .map(index => <Square canMove={canMove} backgroundColor={listContains(winPattern, index-1)?\"#ffeaa7\":\"#E5E5E5\"} sign={String(board[index-1])} index={index} key={Math.random()}/>)\n            }\n        </div>\n    );\n};\n\nexport default Board;\n\n// #E5E5E5\n// #ffeaa7","export const listContains = (list: any[], value: any) => {\n\treturn list.indexOf(value) !== -1;\n};","import React from 'react';\nimport { GAMESTATE } from '../../enums';\nimport \"./style.css\"\n\ntype THUD = {\n    name: string,\n    balance: number,\n    bet: number|string,\n    style: {backgroundColor: string},\n    gameState: GAMESTATE\n}\n\nconst HUD:React.FC<THUD> = (props) => {\n    const {name, balance, bet, gameState, style} = props\n    let balanceStyle = gameState === GAMESTATE.BETTING || gameState === GAMESTATE.GAMEOVER?{display: \"block\"}:{display: \"none\"}\n    return (\n        <div className=\"hud\" style={style}>\n            <div className=\"name\">{name.toLocaleUpperCase()}</div>\n            <div className=\"balance\" style={balanceStyle}>BALANCE: {String(balance).padStart(3,\"0\")}</div>\n            <div className=\"bet\">{String(bet).padStart(2,\"0\")}</div>\n        </div>\n    );\n};\n\nexport default HUD;","import React, { ChangeEvent, useState } from 'react';\nimport { NOTICE_BOARD_STATUS, MESSAGE_TYPE } from '../../enums';\nimport \"./style.css\"\nimport lang from \"../../lang.json\"\n\ntype TInteractiveStatusContainer = {\n    boardType: NOTICE_BOARD_STATUS,\n    message: MESSAGE_TYPE,\n    handlePlaceBetValueInput: (event: ChangeEvent<HTMLInputElement>) => void\n    placeBet: () => void\n    canClick: boolean\n}\n\nconst InteractiveStatusContainer:React.FC<TInteractiveStatusContainer> = (props) => {\n    const {boardType, message, canClick, handlePlaceBetValueInput, placeBet} = props\n    let inputBoardStyle = {width: \"212px\", display: \"block\"}\n    let noticeBoardStyle = {width: \"0px\", display: \"none\"}\n    let btnStyle = {width: \"50px\", display: \"block\"}\n    let btnColorStyle = canClick?{backgroundColor: \"rgb(255, 211, 105)\"}:{backgroundColor: \"#8395a7\"}\n    let btnText = boardType===NOTICE_BOARD_STATUS.GAMEOVER?\"GO\":\"BET\"\n    if(boardType===NOTICE_BOARD_STATUS.BETTING){\n        inputBoardStyle = {width: \"212px\", display: \"block\"}\n        noticeBoardStyle = {width: \"0px\", display: \"none\"}\n        btnStyle = {width: \"50px\", display: \"block\"}\n    }else if(boardType===NOTICE_BOARD_STATUS.NOTICE){\n        inputBoardStyle = {width: \"0px\", display: \"none\"}\n        noticeBoardStyle = {width: \"262px\", display: \"flex\"}\n        btnStyle = {width: \"0px\", display: \"none\"}\n    }else if(boardType===NOTICE_BOARD_STATUS.GAMEOVER){\n        inputBoardStyle = {width: \"0px\", display: \"none\"}\n        noticeBoardStyle = {width: \"212px\", display: \"flex\"}\n        btnStyle = {width: \"50px\", display: \"block\"}\n    }\n\n    let msg = \"\"\n    if(message===MESSAGE_TYPE.WAITING_FOR_OPPONENT_BET){\n        msg = lang.en.waiting_for_op_bet\n    }else if(message === MESSAGE_TYPE.YOUR_MOVE){\n        msg = lang.en.move\n    }else if(message === MESSAGE_TYPE.OPPONENT_MOVE){\n        msg = lang.en.waiting_for_op_move\n    }else if(message === MESSAGE_TYPE.YOU_WON){\n        msg = lang.en.you_won\n    }else if(message === MESSAGE_TYPE.YOU_LOST){\n        msg = lang.en.you_lost\n    }\n\n    return (\n        <div className=\"status-board\">\n            <div className=\"bet-input\" style={inputBoardStyle}>\n                <input className=\"bet-input\" style={{width: \"100%\"}} placeholder={\"place your bet\"} type=\"number\" id=\"betval\" name=\"betval\" min={0} onChange={handlePlaceBetValueInput} spellCheck=\"false\"/>\n            </div>\n            <div className=\"notice-board\" style={noticeBoardStyle}>\n                <div>\n                    {msg}\n                </div>\n            </div>\n            <div className=\"bet-btn\" style={btnStyle}>\n                <button className=\"bet-btn\" onClick={canClick?placeBet:()=>{}} style={{backgroundColor: btnColorStyle.backgroundColor, width: \"100%\"}}>{btnText}</button>\n            </div>\n        </div>\n    );\n};\n\nexport default InteractiveStatusContainer;","import React, { useEffect, useReducer, useState } from \"react\";\nimport { useHistory, useLocation } from \"react-router\";\nimport Board from \"../../components/board\";\nimport CustomButton from \"../../components/custom-button\";\nimport HUD from \"../../components/hud\";\nimport InteractiveStatusContainer from \"../../components/interactive-status-container\";\nimport { NameContext } from \"../../context\";\nimport { GAMESTATE, NOTICE_BOARD_STATUS, MESSAGE_TYPE } from \"../../enums\";\nimport { network } from \"../../services/channels\";\nimport { GAME_NAME, PLAYER_ID } from \"../../services/login\";\nimport { connectToGameChannel } from \"../../services/network\";\n\nimport \"./style.css\";\n\ntype TGameChannelData = {\n\tgameChannelData: {\n\t\tmatch_id: string;\n\t\tplayers: any[];\n\t};\n\tplayerName: string;\n};\n\ntype TGameLocation = {\n\tstate: TGameChannelData;\n};\n\nconst Game = () => {\n\tconst history = useHistory();\n\tconst location: TGameLocation = useLocation();\n\n\tconst [playerBetValue, setPlayerBetValue] = useState(0) \n\tconst [noticeBoardStatus, setNoticeBoardStatus] = useState(NOTICE_BOARD_STATUS.BETTING) \n\tconst [messageType, setMessageType] = useState(MESSAGE_TYPE.PLACE_BET) \n\tconst [gameState, setGameState] = useState(GAMESTATE.BETTING) \n\tconst [playerBalanceValue, setPlayerBalanceValue] = useState(100) \n\tconst [canInputBet, setCanInputBet] = useState(true)\n\tconst [board, setBoard] = useState([0,0,0,0,0,0,0,0,0])\n\n\tconst [opponentBetValue, setOpponentBetValue] = useState(0)\n\tconst [opponentBalanceValue, setOpponentBalanceValue] = useState(100)\n\tconst [opponentName, setOpponentName] = useState(\"\")\n\tconst [winPattern, setWinPattern] = useState([])\n\n\tuseEffect(() => {\n\t\tif (location.state) {\n\t\t\tnetwork.gameChannel = connectToGameChannel(\n\t\t\t\tlocation.state.gameChannelData,\n\t\t\t\tlocation.state.playerName\n\t\t\t);\n\t\t\tnetwork.gameChannel.join().receive(\"ok\", (resp) => {\n\t\t\t\tconsole.log(\"Joined game channel\", resp);\n\t\t\t});\n\n\t\t\tnetwork.gameChannel.on(\"start_game_event\", (message) => {\n\t\t\t\tconsole.log(\"On start_game_event\", message);\n\t\t\t\tif (message.gamestate.player_1.id === PLAYER_ID) {\n\t\t\t\t\tsetOpponentName(message.gamestate.player_2.name)\n\t\t\t\t} else {\n\t\t\t\t\tsetOpponentName(message.gamestate.player_1.name)\n\t\t\t\t}\n\t\t\t\tsetBoard(message.gamestate.board)\n\t\t\t});\n\n\t\t\tnetwork.gameChannel.on(\"bet_res\", (message) => {\n\t\t\t\tconsole.log(\"bet_res\", message);\n\t\t\t\tif (message.p1.id === PLAYER_ID) {\n\t\t\t\t\tsetOpponentBalanceValue(message.p2.balance)\n\t\t\t\t\tsetOpponentBetValue(message.p2.bet)\n\t\t\t\t} else {\n\t\t\t\t\tsetOpponentBalanceValue(message.p1.balance)\n\t\t\t\t\tsetOpponentBetValue(message.p1.bet)\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (message.turn.id === \"continue\") {\n\t\t\t\t\tsetPlayerBetValue(0)\n\t\t\t\t\tsetGameState(GAMESTATE.BETTING)\n\t\t\t\t\tsetMessageType(MESSAGE_TYPE.PLACE_BET)\n\t\t\t\t\tsetNoticeBoardStatus(NOTICE_BOARD_STATUS.BETTING)\n\t\t\t\t} else {\n\t\t\t\t\tif (message.turn.id === PLAYER_ID) {\n\t\t\t\t\t\tsetGameState(GAMESTATE.MOVING)\n\t\t\t\t\t\tsetMessageType(MESSAGE_TYPE.YOUR_MOVE)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsetGameState(GAMESTATE.MOVE_WAITING)\n\t\t\t\t\t\tsetMessageType(MESSAGE_TYPE.OPPONENT_MOVE)\n\t\t\t\t}\n\t\t\t}\n\t\t\t});\n\n\t\t\tnetwork.gameChannel.on(\"move_res\", (message) => {\n                console.log(\"DSB ~ file: index.tsx ~ line 97 ~ network.gameChannel.on ~ message\", message);\n\t\t\t\tlet newBoard = message.board.map((val: any) => val===PLAYER_ID?\"X\":val!==0?\"O\":0);\n\t\t\t\tsetBoard(newBoard)\n\t\t\t\tsetPlayerBetValue(0)\n\t\t\t\tsetGameState(GAMESTATE.BETTING)\n\t\t\t\tsetNoticeBoardStatus(NOTICE_BOARD_STATUS.BETTING)\n\t\t\t\tif (message.p1.id === PLAYER_ID) {\n\t\t\t\t\t\n\t\t\t\t} else {\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\n\t\t\t});\n\n\t\t\tnetwork.gameChannel.on(\"game_res\", (message) => {\n                console.log(\"DSB ~ file: index.tsx ~ line 112 ~ network.gameChannel.on ~ message\", message);\n\t\t\t\tsetWinPattern(message.pattern)\n\t\t\t\tlet newBoard = message.board.map((val: any) => val===PLAYER_ID?\"X\":val!==0?\"O\":0);\n\t\t\t\tsetBoard(newBoard)\n\t\t\t\tsetNoticeBoardStatus(NOTICE_BOARD_STATUS.GAMEOVER)\n\t\t\t\tsetGameState(GAMESTATE.GAMEOVER)\n\t\t\t\tif(message.winner === PLAYER_ID){\n\t\t\t\t\tsetMessageType(MESSAGE_TYPE.YOU_WON)\n\t\t\t\t}else{\n\t\t\t\t\tsetMessageType(MESSAGE_TYPE.YOU_LOST)\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}, []);\n\n\tif (!location.state) {\n\t\thistory.push({\n\t\t\tpathname: \"/\",\n\t\t});\n\t\treturn <></>;\n\t}\n\n\tconst goHome = () => {\n\t\thistory.push({\n\t\t\tpathname: \"/\",\n\t\t});\n\t};\n\n\tconst handlePlaceBetValueInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n\t\tevent.preventDefault();\n\t\tlet val = Number(event.target.value)\n\t\tconsole.log(val);\n\t\tlet currentBalance = playerBalanceValue\n\t\tif(val>currentBalance || val<0) {\n\t\t\tsetCanInputBet(false)\n\t\t\treturn\n\t\t}\n\t\tsetCanInputBet(true)\n\t\tsetPlayerBetValue(Number(val))\n\t}\n\t\n\tconst placeBet = () => {\n\t\tif(gameState!==GAMESTATE.BETTING) return\n\t\tnetwork.gameChannel?.push(\"bet\", {betdata: {playerId: PLAYER_ID, bet: playerBetValue}})\n\t\tsetPlayerBalanceValue(playerBalanceValue-playerBetValue)\n\t\tsetGameState(GAMESTATE.BET_WAITING)\n\t\tsetNoticeBoardStatus(NOTICE_BOARD_STATUS.NOTICE)\n\t\tsetMessageType(MESSAGE_TYPE.WAITING_FOR_OPPONENT_BET)\n\t}\n\n\treturn (\n\t\t<div className=\"game\">\n\t\t\t<div className=\"hud-container\">\n\t\t\t\t<HUD name={location.state.playerName} bet={playerBetValue} balance={playerBalanceValue-playerBetValue} gameState={gameState} style={{backgroundColor: \"#FFD369\"}}/>\n\t\t\t\t<HUD name={opponentName} bet={gameState===GAMESTATE.BET_WAITING||gameState===GAMESTATE.BETTING?\"...\":opponentBetValue} balance={opponentBalanceValue} gameState={gameState} style={{backgroundColor: \"#FFD369\"}}/>\n\t\t\t</div>\n\t\t\t<InteractiveStatusContainer boardType={noticeBoardStatus} canClick={canInputBet} message={messageType} handlePlaceBetValueInput={handlePlaceBetValueInput} placeBet={gameState===GAMESTATE.GAMEOVER?goHome:placeBet}/>\n\t\t\t<Board board={board} winPattern={winPattern} canMove={gameState===GAMESTATE.MOVING}/>\n\t\t</div>\n\t);\n};\n\nexport default Game;\n","import React from \"react\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport Menu from \"./pages/menu\"\nimport Lobby from \"./pages/lobby\";\nimport Game from \"./pages/game\";\n\n\nconst Routes: React.FC = (props) => {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={Menu} ></Route>\n        <Route exact path=\"/lobby\" component={Lobby} ></Route>\n        <Route exact path=\"/game\" component={Game} ></Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default Routes;\n","import React, { useEffect } from 'react';\nimport Routes from \"./routes\";\n\nimport './App.css';\n\n// import { channel } from './services/network';\n\nconst App: React.FC = () =>  {\n\n  // useEffect(() => {\n  //   channel.join().receive(\"ok\", (msg) => {\n  //     console.log(\"DSB: msg\", msg);\n  //   });\n  // }, [])\n\n  return (\n    <div className=\"App\">\n      <Routes/>\n    </div>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}