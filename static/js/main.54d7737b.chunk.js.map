{"version":3,"sources":["services/login.ts","services/network.ts","pages/menu/index.tsx","pages/lobby/index.tsx","services/channels.ts","components/square/index.tsx","components/board/index.tsx","components/bet-controller/index.tsx","components/player-hud/index.tsx","components/hud/index.tsx","components/result/index.tsx","pages/game/index.tsx","routes.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["PLAYER_ID","String","Math","floor","random","console","log","socket","Socket","params","playerId","connect","Menu","history","useHistory","useState","gameMode","setGameMode","roomName","setRoomName","playerCount","setPlayerCount","onSetGameMode","mode","handleRoomNameChange","e","target","value","handlePlayerCountChange","parseInt","max","onFormSubmit","preventDefault","gameData","matchmakerChannel","matchmakerChannelName","maxPlayer","gameName","matchData","matchId","channel","player_count","room_name","match_id","connectToMatchmakerChannel","join","receive","resp","on","message","gameChannelData","leave","push","pathname","state","className","onClick","onSubmit","type","placeholder","onChange","Lobby","network","Square","props","canMove","gameChannel","movedata","pos","Board","board","values","i","map","BetController","handleBetController","val","canBet","style","opacity","PlayerHud","lid","balance","bet","HUD","isOpponentVisible","setBetAmount","opponentData","playerData","betController","Result","resultMessage","winner","Game","location","useLocation","isGameReady","setGameReady","setBetStatus","setMoveStatus","setOpponentHUDVisibility","betAmount","setOpponentData","setPlayerData","setBoard","isGameOver","setGameOver","setWinner","useEffect","matchmakerChannelMessage","connectToGameChannel","p1","id","p2","turn","newBoard","newBalance","min","newBet","betdata","Routes","exact","path","component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.54d7737b.chunk.js","sourcesContent":["export const PLAYER_ID = String(Math.floor(Math.random() * 100000 ))\nexport const GAME_NAME = \"btt\"","import { Channel, Socket } from \"phoenix\";\nimport { GAME_NAME, PLAYER_ID } from \"./login\";\n\nexport type TMatchmakerChannelOptions = {\n    playerCount: number,\n    roomName: string,\n    matchId: string,\n    gameMode: string\n}\n\nexport type TMatchData = {\n    playerCount: number,\n    roomName: string,\n    gameMode: string\n}\n\nconsole.log(\"connecting to btt server ....\")\n// const socket: Socket = new Socket(\"ws://localhost:4000/socket\", {\nconst socket: Socket = new Socket(\"wss://still-plains-97814.herokuapp.com/socket\", {\n    params: { playerId: PLAYER_ID },\n});\nsocket.connect();\n\n// const channel: Channel = socket.channel(\"room:home\", {});\n\nconst connectToMatchmakerChannel = (gameData: TMatchData) => {\n    let matchmakerChannelName: string = \"\";\n    let maxPlayer = gameData.playerCount;\n    let matchId:string = \"\"\n    let gameName: string = GAME_NAME\n    switch (gameData.gameMode){\n        case \"default\":\n          if (gameData.roomName) {\n            matchmakerChannelName = `garuda_matchmaker:${gameData.roomName}:${gameName}:${maxPlayer}` ;\n            matchId = gameData.roomName;\n          } else {\n            matchmakerChannelName = `garuda_matchmaker:${gameName}:${maxPlayer}` ;\n            matchId = \"\";\n          }\n          break\n        case \"create\":\n          matchmakerChannelName = `garuda_matchmaker:${gameData.roomName}:${gameName}:createjoin` ;\n          matchId = gameData.roomName;\n          break\n        case \"join\":\n          matchmakerChannelName = `garuda_matchmaker:${gameData.roomName}:${gameName}:createjoin` ;\n          matchId = gameData.roomName;\n          maxPlayer = -1\n          break\n        default:\n          break\n  \n      }\n    let matchData: TMatchmakerChannelOptions = {\n        roomName: matchmakerChannelName, \n        playerCount: maxPlayer,\n        matchId: gameData.roomName,\n        gameMode: gameData.gameMode\n    }\n\n    let channel = socket.channel(matchmakerChannelName, {\n        player_count: matchData.playerCount,\n        room_name: matchData.roomName,\n        match_id: matchData.matchId,\n        mode: matchData.gameMode\n    });\n    return channel\n}\n\nconst connectToGameChannel = (matchmakerChannelMessage: any) => {\n    let matchId = matchmakerChannelMessage[\"match_id\"];\n    let gameName = GAME_NAME\n    let gameChannel = socket.channel(`${gameName}:${matchId}`);\n    return gameChannel\n}\n\nexport { socket, connectToMatchmakerChannel, connectToGameChannel } ","import { Channel } from 'phoenix';\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { PLAYER_ID } from '../../services/login';\nimport { connectToGameChannel, connectToMatchmakerChannel, TMatchData } from '../../services/network';\n\nimport \"./style.css\"\n\nconst Menu = () => {\n    const history = useHistory();\n    const [gameMode, setGameMode] = useState(\"\")\n    const [roomName, setRoomName] = useState(\"\")\n    const [playerCount, setPlayerCount] = useState(2)\n\n    const goToGame = ( gameChannelData: any) => {\n\t\thistory.push({\n\t\t\tpathname: \"/game\",\n\t\t\tstate: {gameChannelData},\n\t\t});\n\t};\n\n    const onSetGameMode = (mode: string) => {\n        setRoomName(\"\")\n        setPlayerCount(2)\n        setGameMode(mode)\n    }\n\n    const handleRoomNameChange:((event: React.ChangeEvent<HTMLInputElement>) => void) = (e) => {\n        setRoomName(e.target.value)\n    }\n    \n    const handlePlayerCountChange:((event: React.ChangeEvent<HTMLInputElement>) => void) = (e) => {\n        let playerCount = parseInt(e.target.value) || 2\n        setPlayerCount(Math.max(2,playerCount))\n    }\n    \n    const onFormSubmit: ((event: React.FormEvent<HTMLFormElement>) => void) = (e) => {\n        e.preventDefault()\n\n        let gameData: TMatchData = {\n            roomName, \n            playerCount,\n            gameMode\n        }\n\n        let matchmakerChannel = connectToMatchmakerChannel(gameData)\n        matchmakerChannel.join()\n        .receive(\"ok\", resp => {console.log(\"Joined matchmaker\", resp); return \"ok\"})\n\n        matchmakerChannel.on(\"match_maker_event\", (message) => {\n            console.log(\"On match maker event\", message);\n            matchmakerChannel.leave()\n            goToGame(message)\n\n            // gameChannel = connectToGameChannel(message)\n            // gameChannel.join()\n            // .receive(\"ok\", resp => {console.log(\"Joined matchmaker\", resp)})\n        });\n        console.log(gameData)\n    }\n\n    return (\n        <div className=\"menu\" >\n            <div className=\"title\">\n                Menu\n            </div>\n            <div className=\"player-id\">\n                PLAYER ID: {PLAYER_ID}\n            </div>\n            <div className=\"button-container\">\n                <button className=\"btn-mode\" onClick={() => onSetGameMode(\"create\")}>CREATE ROOM</button>\n                <button className=\"btn-mode\" onClick={() => onSetGameMode(\"join\")}>JOIN ROOM</button>\n                <button className=\"btn-mode\" onClick={() => onSetGameMode(\"default\")}>RANDOM</button>\n            </div>\n            <div className=\"mode-input-container\">\n                {\n                    gameMode===\"create\" && \n                    <form onSubmit={onFormSubmit}>\n                        <label>\n                        Room name:\n                        <input type=\"text\" placeholder=\"Enter room name\" value={roomName} onChange={handleRoomNameChange} />\n                        </label>\n                        <label>\n                        Player count:\n                        <input type=\"text\" placeholder=\"Enter number\" value={playerCount} onChange={handlePlayerCountChange} />\n                        </label>\n                        <input type=\"submit\" value=\"Submit\" />\n                    </form>\n                }\n                {\n                    gameMode===\"join\" && \n                    <form onSubmit={onFormSubmit}>\n                        <label>\n                        Room name:\n                        <input type=\"text\" placeholder=\"Enter room name\" value={roomName} onChange={handleRoomNameChange} />\n                        </label>\n                        <input type=\"submit\" value=\"Submit\" />\n                    </form>\n                }\n                {\n                    gameMode===\"default\" && \n                    <form onSubmit={onFormSubmit}>\n                        <label>\n                        Room name:\n                        <input type=\"text\" placeholder=\"Optional\" value={roomName} onChange={handleRoomNameChange} />\n                        </label>\n                        <label>\n                        Player count:\n                        <input type=\"text\" placeholder=\"Enter number\" value={playerCount} onChange={handlePlayerCountChange} />\n                        </label>\n                        <input type=\"submit\" value=\"Submit\" />\n                    </form>\n                }\n            </div>\n        </div>\n    );\n};\n\nexport default Menu;","import React from 'react';\n\nconst Lobby = () => {\n    return (\n        <div>\n            Lobby\n        </div>\n    );\n};\n\nexport default Lobby;","import { Channel } from \"phoenix\";\ninterface INetworkObject {\n    gameChannel?: Channel,\n}\n\nconst network: INetworkObject = {}\n\nexport { network }","import React from 'react';\nimport { preProcessFile } from 'typescript';\nimport { network } from '../../services/channels';\nimport { PLAYER_ID } from '../../services/login';\nimport \"./style.css\"\n\ntype TSquare = {\n    value: string,\n    pos: number,\n    canMove: boolean,\n}\n\nconst Square = (props: TSquare) => {\n    const {value} = props\n\n    const sendMove = () => {\n        if(!props.canMove) return\n        network.gameChannel?.push(\"move\",{movedata: { pos: props.pos}})\n    }\n    return (\n        <button className=\"square\" onClick={sendMove}>\n\t\t    {value === \"0\" && \"\"}\n\t\t    {value === PLAYER_ID && \"X\"}\n\t\t    {value !== PLAYER_ID && value !== \"0\"  && \"O\"}\n\n        </button>\n    );\n};\n\nexport default Square;","import React from 'react';\nimport Square from '../square';\nimport \"./style.css\"\n\ntype TBoard = {\n    canMove: boolean,\n    board: string[],\n}\n\n\nconst Board:React.FC<TBoard> = ({canMove, board}) => {\n    let values = []\n    for(let i=1; i <= 9; i++){\n        values.push(i)\n    }    \n    return (\n        <div className=\"board\">\n            {values.map(value => \n                <Square value={board[value-1]} key={value} pos={value} canMove={canMove}/>\n            )}\n        </div>\n    );\n};\n\nexport default Board;","import React from 'react';\nimport \"./style.css\"\n\ntype TBetController = {\n    onClick: (val:number)=> void,\n    canBet: boolean\n}\n\nconst BetController = (props: TBetController) => {\n    \n    const handleBetController = (val:number) => {\n        if(!props.canBet) return\n        props.onClick(val)\n    }\n    \n    return (\n        <div className=\"bet-controller\" style={{opacity: props.canBet?1:0}}>\n            <div className=\"up\" onClick={()=>handleBetController(1)}>U</div>\n            <div className=\"down\" onClick={()=>handleBetController(-1)}>D</div>\n        </div>\n    );\n};\n\nexport default BetController;","import React from 'react';\n\nimport \"./style.css\"\n\ntype TPlayerHud = {\n    balance: number,\n    bet: number,\n    lid?: boolean\n}\nconst PlayerHud = (props: TPlayerHud) => {\n    return (\n        <div className=\"player-hud\">\n            {\n                props.lid ? \n                <div className=\"waiting-lig\">WAITING</div>:\n                <>\n                <div className=\"balance\">{props.balance}</div>\n                <div className=\"bet\">{props.bet}</div>\n                </>\n            }\n        </div>\n    );\n};\n\nexport default PlayerHud;","import React, { useState } from 'react';\nimport BetController from '../bet-controller';\nimport PlayerHud from '../player-hud';\nimport \"./style.css\"\n\ntype THud = {\n    canBet: boolean,\n    setBetAmount: (amount: number)=> void,\n    isOpponentVisible: boolean,\n    opponentData: {bet: number, balance: number},\n    playerData: {bet: number, balance: number},\n    betController: (val: number) => void\n}\n\nconst HUD:React.FC<THud> = ({canBet, setBetAmount, isOpponentVisible, opponentData, playerData, betController}) => {\n    // const [balanceA, setBalanceA] = useState(playerData.balance)\n    // const [betA, setBetA] = useState(playerData.bet)\n\n    // const handleBetController = (val:number) => {\n    //     let newBalance = Math.max(0,Math.min(playerData.balance,balanceA-val))\n    //     let newBet = Math.max(0,Math.min(playerData.balance,betA+val))\n    //     setBalanceA(newBalance)\n    //     setBetA(newBet)\n    //     setBetAmount(newBet)\n    // }\n\n    return (\n        <div className=\"hud\">\n            <PlayerHud balance={playerData.balance} bet={playerData.bet}/>\n            <BetController canBet={canBet} onClick={(val:number) => betController(val) }/>\n            <PlayerHud balance={opponentData.balance} bet={opponentData.bet} lid={!isOpponentVisible}/>\n        </div>\n    );\n};\n\nexport default HUD;","import React from 'react';\nimport { PLAYER_ID } from '../../services/login';\nimport \"./style.css\"\n\ntype TResult = {\n    winner: string\n}\n\nconst Result:React.FC<TResult> = ({winner}) => {\n    let resultMessage = \"\"\n    let resultStatus = \"\"\n    if(winner === PLAYER_ID){\n        resultStatus = \"won\"\n        resultMessage = \"CONGRATULATIONS! YOU WON\"\n    }else{\n        resultStatus = \"lost\"\n        resultMessage = \"BETTER LUCK NEXT TIME!\"\n    }\n    return (\n        <div className=\"result-comp\">\n            {resultMessage}\n        </div>\n    );\n};\n\nexport default Result;","import React, { useEffect, useReducer, useState } from 'react';\nimport { useHistory, useLocation } from 'react-router';\nimport Board from '../../components/board';\nimport HUD from '../../components/hud';\nimport Result from '../../components/result';\nimport { network } from '../../services/channels';\nimport { PLAYER_ID } from '../../services/login';\nimport { connectToGameChannel } from '../../services/network';\n\nimport \"./style.css\"\n\ntype TGameChannelData = {\n        gameChannelData: {\n        match_id: string,\n        players: any[]\n    }\n}\n\ntype TGameLocation = {\n    state: TGameChannelData\n}\n\nconst Game = () => {\n\n    const history = useHistory()\n    const location: TGameLocation = useLocation();\n\n    if (!location.state) {\n        history.push({\n            pathname: \"/\",\n        });\n        // return <div></div>;\n    }\n    \n    const [isGameReady, setGameReady] = useState(false)\n    const [canBet, setBetStatus] = useState(true)\n    const [canMove, setMoveStatus] = useState(false)\n    const [isOpponentVisible, setOpponentHUDVisibility] = useState(false)\n    \n    const [betAmount, setBetAmount] = useState(0)\n    \n    const [opponentData, setOpponentData] = useState({bet: 0, balance: 100})\n    const [playerData, setPlayerData] = useState({bet: 0, balance: 100})\n    \n    const [board, setBoard] = useState([\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"])\n    const [isGameOver, setGameOver] = useState(false)\n    const [winner, setWinner] = useState(\"\")\n    \n    useEffect(() => {\n        if(location.state){\n            \n            network.gameChannel = connectToGameChannel(location.state.gameChannelData)\n            network.gameChannel.join()\n            .receive(\"ok\", resp => {console.log(\"Joined game channel\", resp)})\n        \n            network.gameChannel.on(\"start_game_event\", (message) => {\n                console.log(\"On start_game_event\", message);\n                setGameReady(true)\n            });\n        \n            network.gameChannel.on(\"bet_res\", (message) => {\n                console.log(\"bet_res\", message);\n                if(message.p1.id === PLAYER_ID){\n                    setOpponentData({bet: message.p2.bet, balance: message.p2.balance})\n                    setPlayerData({bet: message.p1.bet, balance: message.p1.balance})\n                }else{\n                    setOpponentData({bet: message.p1.bet, balance: message.p1.balance})\n                    setPlayerData({bet: message.p2.bet, balance: message.p2.balance})\n                }\n    \n                console.log(\"DSB ~ file: index.tsx ~ line 60 ~ network.gameChannel.on ~ message.turn\", message.turn);\n                console.log(\"DSB ~ file: index.tsx ~ line 61 ~ network.gameChannel.on ~ PLAYER_ID\", PLAYER_ID);\n                if(message.turn.id === PLAYER_ID) {\n                    setMoveStatus(true)\n                    console.log(\"YOU CAN MOVE\")\n                }else{\n                    setMoveStatus(false)\n                    console.log(\"YOU CAN NOT MOVE\")\n                }\n                \n                setOpponentHUDVisibility(true)\n                setBetStatus(false)\n    \n            });\n    \n            network.gameChannel.on(\"move_res\", (message) => {\n                console.log(\"move_res\", message);\n                let newBoard = (message.board).map((val: any) => String(val))\n                if(message.p1.id === PLAYER_ID){\n                    setOpponentData({bet: message.p2.bet, balance: message.p2.balance})\n                    setPlayerData({bet: 0, balance: message.p1.balance})\n                }else{\n                    setOpponentData({bet: message.p1.bet, balance: message.p1.balance})\n                    setPlayerData({bet: 0, balance: message.p2.balance})\n                }\n                setBoard(newBoard)\n                setBetStatus(true)\n                setMoveStatus(false)\n                setOpponentHUDVisibility(false)\n            });\n    \n            network.gameChannel.on(\"game_res\", (message) => {\n                console.log(\"game_res\", message);\n                setWinner(message.winner)\n                let newBoard = (message.board).map((val: any) => String(val))\n                setBoard(newBoard)\n                setBetStatus(false)\n                setMoveStatus(false)\n                setGameOver(true)\n            });\n        }\n        \n    },[])\n\n    const goHome = () =>{\n        history.push({\n            pathname: \"/\",\n        });\n    }\n\n    const placeBet = () => {\n        if(!canBet) return\n        console.log(betAmount)\n        setBetStatus(false)\n        setMoveStatus(false)\n        network.gameChannel?.push(\"bet\",{betdata: {playerId: PLAYER_ID, bet: betAmount}})\n    }\n\n    const handleBetController = (val:number) => {\n        let newBalance = Math.max(0,Math.min(playerData.balance,playerData.balance-val))\n        let newBet = Math.max(0,Math.min(playerData.balance,playerData.bet+val))\n        // setBalanceA(newBalance)\n        // setBetA(newBet)\n        setPlayerData({bet: newBet, balance: newBalance})\n        setBetAmount(newBet)\n    }\n\n    return (\n        <div className=\"game\">\n            {\n                !isGameReady && \n                <div className=\"waiting\">\n                    WAITING...\n                </div>\n            }\n            {\n                isGameReady && \n                <div className=\"start-game\">\n                    <HUD canBet={canBet} setBetAmount={setBetAmount} isOpponentVisible={isOpponentVisible} opponentData={opponentData} playerData={playerData} betController={(val:number) => handleBetController(val)}/>\n                    <div className=\"bet-confirm\" style={{opacity: canBet?1:0}}>\n                        <button className=\"btn-bet-confirm\" onClick={placeBet}>CONFIRM</button>\n                    </div>\n                    <Board canMove={canMove} board={board}/>\n                    {\n                    isGameOver && \n                    <>\n                        <Result winner={winner}/>\n                        <button className=\"btn-go-home\" onClick={goHome}>NEW MATCH</button>\n                    </>\n                    }\n                </div>\n\n            }\n        </div>\n    );\n};\n\nexport default Game;","import React from \"react\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport Menu from \"./pages/menu\"\nimport Lobby from \"./pages/lobby\";\nimport Game from \"./pages/game\";\n\n\nconst Routes: React.FC = (props) => {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={Menu} ></Route>\n        <Route exact path=\"/lobby\" component={Lobby} ></Route>\n        <Route exact path=\"/game\" component={Game} ></Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default Routes;\n","import React, { useEffect } from 'react';\nimport Routes from \"./routes\";\n\nimport './App.css';\n\n// import { channel } from './services/network';\n\nconst App: React.FC = () =>  {\n\n  // useEffect(() => {\n  //   channel.join().receive(\"ok\", (msg) => {\n  //     console.log(\"DSB: msg\", msg);\n  //   });\n  // }, [])\n\n  return (\n    <div className=\"App\">\n      <Routes/>\n    </div>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}