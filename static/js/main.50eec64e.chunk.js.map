{"version":3,"sources":["components/input-playername/index.tsx","components/logo/index.tsx","components/custom-button/index.tsx","components/menu-button/index.tsx","components/menu-button-container/index.tsx","services/login.ts","services/network.ts","pages/menu/index.tsx","pages/lobby/index.tsx","services/channels.ts","components/square/index.tsx","components/board/index.tsx","context.tsx","components/bet-controller/index.tsx","components/player-hud/index.tsx","components/hud/index.tsx","components/result/index.tsx","pages/game/index.tsx","routes.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["InputPlayername","props","className","placeholder","type","id","name","value","onChange","handleChange","spellCheck","Logo","style","backgroundColor","color","foregroundColor","CustomButton","onClick","text","MenuButton","width","animate","shouldResetWidth","roomName","handleOnChange","required","MenuButtonContainer","useState","index","toggleIndex","setGameMode","idx","mode","console","log","handleModeChange","onSubmit","confirm","PLAYER_ID","String","Math","floor","random","socket","Socket","params","playerId","connect","Menu","history","useHistory","gameMode","setRoomName","playerCount","setPlayerCount","localStorage","getItem","setName","searching","setSearching","useLoading","loading","indicator","indicatorEl","containerProps","e","target","setItem","gameData","matchmakerChannel","matchmakerChannelName","maxPlayer","gameName","matchData","matchId","channel","player_count","room_name","match_id","connectToMatchmakerChannel","join","receive","resp","on","message","gameChannelData","leave","push","pathname","state","playerName","preventDefault","Lobby","network","Square","canMove","gameChannel","movedata","pos","Board","board","values","i","map","NameContext","React","createContext","opponentName","BetController","handleBetController","val","canBet","opacity","PlayerHud","lid","betWon","balance","bet","HUD","isOpponentVisible","setBetAmount","opponentData","playerData","betController","playerNames","useContext","Result","resultMessage","winner","Game","location","useLocation","setOpponentName","isGameReady","setGameReady","setBetStatus","setMoveStatus","setOpponentHUDVisibility","betAmount","setOpponentData","setPlayerData","setBoard","isGameOver","setGameOver","setWinner","useEffect","matchmakerChannelMessage","connectToGameChannel","gamestate","player_1","player_2","p1","p2","turn","newBoard","Provider","newBalance","max","min","newBet","betdata","Routes","exact","path","component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.50eec64e.chunk.js","sourcesContent":["import React, { ChangeEvent } from 'react';\nimport \"./style.css\"\n\ntype TInputPlayername = {\n    value: string,\n    handleChange: (event: ChangeEvent<HTMLInputElement>) => void\n}\n\nconst InputPlayername:React.FC<TInputPlayername> = (props) => {\n    return (\n        <div className=\"input-playername\">\n            {<input className=\"pname-input-field\" placeholder={\"your name\"} type=\"text\" id=\"fname\" name=\"fname\" value={props.value} onChange={props.handleChange} spellCheck=\"false\"/>}\n        </div>\n    );\n};\n\nexport default InputPlayername;","import React from 'react';\nimport \"./style.css\"\n\ntype TLogo = {\n    backgroundColor: string,\n    foregroundColor: string\n}\n\nconst Logo:React.FC<TLogo> = (props) => {\n    return (\n        <div className=\"logo\">\n            <div className=\"background\" style={{backgroundColor: props.backgroundColor}}>\n                <div className=\"foreground\"  style={{color: props.foregroundColor}}>\n                    <div className=\"logo-square top left\">B</div>\n                    <div className=\"logo-square top c\">E</div>\n                    <div className=\"logo-square top right\">T</div>\n\n                    <div className=\"logo-square m left\">T</div>\n                    <div className=\"logo-square m c\">A</div>\n                    <div className=\"logo-square m right\">C</div>\n\n                    <div className=\"logo-square bottom left\">T</div>\n                    <div className=\"logo-square bottom c\">O</div>\n                    <div className=\"logo-square bottom right\">E</div>\n                </div>\n\n            </div>\n\n        </div>\n    );\n};\n\nexport default Logo;","import React, { FormEvent } from \"react\";\nimport \"./style.css\";\n\ntype TCustomButton = {\n    text: string;\n    onClick: () => void;\n    backgroundColor?: string\n};\n\nconst CustomButton: React.FC<TCustomButton> = (props) => {\n    return (\n        <div className=\"custom-button\">\n            <button className=\"btn\" onClick={props.onClick} style={{backgroundColor: props.backgroundColor||\"#e5e5e5\"}}>\n                {props.text}{\" \"}\n            </button>\n        </div>\n    );\n};\n\nexport default CustomButton;\n","import React, { useState } from \"react\";\nimport CustomButton from \"../custom-button\";\nimport \"./style.css\";\n\ntype TMenuButton = {\n\ttext: string;\n\tonClick: () => void;\n    animate?: boolean;\n    confirm?:boolean\n\tshouldResetWidth: boolean;\n\thandleOnChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n\troomName: string;\n};\n\nconst MenuButton: React.FC<TMenuButton> = (props) => {\n\tconst placeholderText: string = \"Enter room name\";\n\n\treturn (\n\t\t<div className=\"menu-button\">\n\t\t\t<div\n\t\t\t\tclassName=\"input-component\"\n\t\t\t\tstyle={{\n\t\t\t\t\twidth: !props.animate\n\t\t\t\t\t\t? \"0%\"\n\t\t\t\t\t\t: props.shouldResetWidth\n\t\t\t\t\t\t? \"0%\"\n\t\t\t\t\t\t: \"70%\",\n                }}\n                \n\t\t\t>\n\t\t\t\t<input\n\t\t\t\t\tclassName=\"rname-input-field\"\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tid={props.text}\n\t\t\t\t\tplaceholder={placeholderText}\n\t\t\t\t\tvalue={props.roomName}\n\t\t\t\t\tonChange={props.handleOnChange}\n\t\t\t\t\tspellCheck=\"false\"\n                    required\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div\n\t\t\t\tclassName=\"btn-component\"\n\t\t\t\tstyle={{\n\t\t\t\t\twidth: !props.animate\n\t\t\t\t\t\t? \"100%\"\n\t\t\t\t\t\t: props.shouldResetWidth\n\t\t\t\t\t\t? \"100%\"\n\t\t\t\t\t\t: \"30%\",\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<CustomButton\n\t\t\t\t\ttext={\n\t\t\t\t\t\t!props.animate\n\t\t\t\t\t\t\t?  props.shouldResetWidth? props.text:\"CONFIRM ?\"\n\t\t\t\t\t\t\t: props.shouldResetWidth\n\t\t\t\t\t\t\t? props.text\n\t\t\t\t\t\t\t: \"GO\"\n\t\t\t\t\t}\n\n                    onClick={ props.shouldResetWidth\n\t\t\t\t\t\t\t? () => {}\n\t\t\t\t\t\t\t: props.onClick\n\t\t\t\t\t}\n\t\t\t\t\tbackgroundColor={\n\t\t\t\t\t\tprops.shouldResetWidth\n\t\t\t\t\t\t? \"\"\n\t\t\t\t\t\t: \"#ffd369\"}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default MenuButton;\n","import React, { useState } from \"react\";\nimport MenuButton from \"../menu-button\";\nimport \"./style.css\";\n\ntype TMenuButtonContainer = {\n\tonSubmit: () => void;\n\thandleOnChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n\troomName: string;\n\thandleModeChange: (gameMode: string) => void;\n};\n\nconst MenuButtonContainer: React.FC<TMenuButtonContainer> = (props) => {\n    const [index, toggleIndex] = useState(0);\n    \n\tconst setGameMode = (idx: number, mode: string) => {\n    console.log(\"DSB ~ file: index.tsx ~ line 16 ~ setGameMode ~ mode\", mode);\n\t\tprops.handleModeChange(mode);\n\t\ttoggleIndex(idx);\n\t};\n\n\treturn (\n\t\t<div className=\"menu-button-container\">\n\t\t\t<div style={{ width: \"262px\" }}>\n\t\t\t\t<div onClick={() => setGameMode(1, \"create\")}>\n\t\t\t\t\t<MenuButton\n\t\t\t\t\t\tonClick={props.onSubmit}\n\t\t\t\t\t\ttext={\"CREATE ROOM\"}\n\t\t\t\t\t\tanimate\n\t\t\t\t\t\tshouldResetWidth={index !== 1}\n\t\t\t\t\t\thandleOnChange={props.handleOnChange}\n\t\t\t\t\t\troomName={props.roomName}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div onClick={() => setGameMode(2, \"join\")}>\n\t\t\t\t\t<MenuButton\n\t\t\t\t\t\tonClick={props.onSubmit}\n\t\t\t\t\t\ttext={\"JOIN ROOM\"}\n\t\t\t\t\t\tanimate\n\t\t\t\t\t\tshouldResetWidth={index !== 2}\n\t\t\t\t\t\thandleOnChange={props.handleOnChange}\n\t\t\t\t\t\troomName={props.roomName}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div onClick={() => setGameMode(3, \"default\")}>\n\t\t\t\t\t<MenuButton\n\t\t\t\t\t\tonClick={props.onSubmit}\n\t\t\t\t\t\ttext={\"RANDOM ROOM\"}\n\t\t\t\t\t\tshouldResetWidth={index !== 3}\n\t\t\t\t\t\thandleOnChange={props.handleOnChange}\n                        roomName={props.roomName}\n                        confirm\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default MenuButtonContainer;\n","export const PLAYER_ID = String(Math.floor(Math.random() * 100000 ))\nexport const GAME_NAME = \"btt\"","import { Socket } from \"phoenix\";\nimport { GAME_NAME, PLAYER_ID } from \"./login\";\n\nexport type TMatchmakerChannelOptions = {\n\tplayerCount: number;\n\troomName: string;\n\tmatchId: string;\n\tgameMode: string;\n};\n\nexport type TMatchData = {\n\tplayerCount: number;\n\troomName: string;\n\tgameMode: string;\n};\n\nconsole.log(\"connecting to btt server ....\");\n// const socket: Socket = new Socket(\"ws://localhost:4000/socket\", {\n\tconst socket: Socket = new Socket(\"wss://still-plains-97814.herokuapp.com/socket\", {\n\tparams: { playerId: PLAYER_ID },\n});\nsocket.connect();\n\n// const channel: Channel = socket.channel(\"room:home\", {});\n\nconst connectToMatchmakerChannel = (gameData: TMatchData) => {\n\tconsole.log(\n\t\t\"DSB ~ file: network.ts ~ line 27 ~ connectToMatchmakerChannel ~ gameData\",\n\t\tgameData\n\t);\n\tlet matchmakerChannelName: string = \"\";\n\tlet maxPlayer = gameData.playerCount;\n\tlet matchId: string = \"\";\n\tlet gameName: string = GAME_NAME;\n\tswitch (gameData.gameMode) {\n\t\tcase \"default\":\n\t\t\tif (gameData.roomName) {\n\t\t\t\tmatchmakerChannelName = `garuda_matchmaker:${gameData.roomName}:${gameName}:${maxPlayer}`;\n\t\t\t\tmatchId = gameData.roomName;\n\t\t\t} else {\n\t\t\t\tmatchmakerChannelName = `garuda_matchmaker:${gameName}:${maxPlayer}`;\n\t\t\t\tmatchId = \"\";\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"create\":\n\t\t\tmatchmakerChannelName = `garuda_matchmaker:${gameData.roomName}:${gameName}:createjoin`;\n\t\t\tmatchId = gameData.roomName;\n\t\t\tbreak;\n\t\tcase \"join\":\n\t\t\tmatchmakerChannelName = `garuda_matchmaker:${gameData.roomName}:${gameName}:createjoin`;\n\t\t\tmatchId = gameData.roomName;\n\t\t\tmaxPlayer = -1;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t}\n\tlet matchData: TMatchmakerChannelOptions = {\n\t\troomName: matchmakerChannelName,\n\t\tplayerCount: maxPlayer,\n\t\tmatchId: gameData.roomName,\n\t\tgameMode: gameData.gameMode,\n\t};\n\n\tlet channel = socket.channel(matchmakerChannelName, {\n\t\tplayer_count: matchData.playerCount,\n\t\troom_name: matchData.roomName,\n\t\tmatch_id: matchData.matchId,\n\t\tmode: matchData.gameMode,\n\t});\n\treturn channel;\n};\n\nconst connectToGameChannel = (matchmakerChannelMessage: any, name: string) => {\n\tconsole.log(\n\t\t\"DSB ~ file: network.ts ~ line 71 ~ connectToGameChannel ~ matchmakerChannelMessage\",\n\t\tmatchmakerChannelMessage\n\t);\n\tlet matchId = matchmakerChannelMessage[\"match_id\"];\n\tlet gameName = GAME_NAME;\n\tlet gameChannel = socket.channel(`${gameName}:${matchId}`, { name });\n\treturn gameChannel;\n};\n\nexport { socket, connectToMatchmakerChannel, connectToGameChannel };\n","import { Channel } from \"phoenix\";\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useLoading, Grid } from '@agney/react-loading';\n\nimport CustomButton from \"../../components/custom-button\";\nimport InputPlayername from \"../../components/input-playername\";\nimport Logo from \"../../components/logo\";\nimport MenuButton from \"../../components/menu-button\";\nimport MenuButtonContainer from \"../../components/menu-button-container\";\nimport { PLAYER_ID } from \"../../services/login\";\nimport {\n\tconnectToGameChannel,\n\tconnectToMatchmakerChannel,\n\tTMatchData,\n} from \"../../services/network\";\n\nimport \"./style.css\";\n\nconst Menu = () => {\n\tconst history = useHistory();\n\tconst [gameMode, setGameMode] = useState(\"\");\n\tconst [roomName, setRoomName] = useState(\"\");\n\tconst [playerCount, setPlayerCount] = useState(2);\n    const [name, setName] = useState(localStorage.getItem(\"btt-name\") || String(PLAYER_ID));\n    \n    const [searching, setSearching] = useState(false)\n\n    const { containerProps, indicatorEl } = useLoading({\n        loading: true,\n        //@ts-ignore\n        indicator: <Grid width=\"50\"/>,\n      });\n\n\tconst goToGame = (gameChannelData: any) => {\n\t\thistory.push({\n\t\t\tpathname: \"/game\",\n\t\t\tstate: { gameChannelData, playerName: name },\n\t\t});\n\t};\n\n\tconst onSetGameMode = (mode?: string) => {\n\t\tsetRoomName(\"\");\n\t\tsetPlayerCount(2);\n\t\tsetGameMode(mode ? mode : \"default\");\n\t};\n\n\tconst handleRoomNameChange: (\n\t\tevent: React.ChangeEvent<HTMLInputElement>\n\t) => void = (e) => {\n\t\te.preventDefault();\n\n\t\tsetRoomName(e.target.value);\n\t};\n\n\tconst handlePlayerNameChange: (\n\t\tevent: React.ChangeEvent<HTMLInputElement>\n\t) => void = (e) => {\n\t\tsetName(e.target.value);\n\t\tconsole.log(\"DSB ~ file: index.tsx ~ line 67 ~ Menu ~ e.target.value\", e.target.value);\n\t\tlocalStorage.setItem(\"btt-name\",e.target.value)\n\t};\n\n\tconst requestStartGame = () => {\n\n            \n        let gameData: TMatchData = {\n            roomName,\n            playerCount,\n            gameMode: gameMode||\"default\",\n        };\n        \n        if(gameData.gameMode !== \"default\" && !roomName){\n            return\n        }\n        \n        setSearching(true)\n\n\t\tlet matchmakerChannel = connectToMatchmakerChannel(gameData);\n\t\tmatchmakerChannel.join().receive(\"ok\", (resp) => {\n\t\t\tconsole.log(\"Joined matchmaker\", resp);\n\t\t\treturn \"ok\";\n\t\t});\n\n\t\tmatchmakerChannel.on(\"match_maker_event\", (message) => {\n\t\t\tconsole.log(\"On match maker event\", message);\n\t\t\tmatchmakerChannel.leave();\n\t\t\tgoToGame(message);\n\n\t\t});\n\t};\n\n\treturn (\n\t\t<div className=\"menu\">\n\t\t\t<Logo backgroundColor={\"#ffd369\"} foregroundColor={\"#393e46\"} />\n\n\t\t\t<InputPlayername\n\t\t\t\tvalue={name}\n\t\t\t\thandleChange={handlePlayerNameChange}\n\t\t\t/>\n            {\n                searching?\n                <div className=\"searching\">\n\t\t\t\t\t\tSEARCHING...\n                    <div>\n                        {indicatorEl}\n                    </div>\n                    {/* SEARCHING... */}\n                </div>:\n                <MenuButtonContainer\n                    onSubmit={requestStartGame}\n                    // onSubmit={()=>{}}\n                    handleModeChange={onSetGameMode}\n                    roomName={roomName}\n                    handleOnChange={handleRoomNameChange}\n                />\n            }\n\t\t</div>\n\t);\n};\n\nexport default Menu;\n","import React from 'react';\n\nconst Lobby = () => {\n    return (\n        <div>\n            Lobby\n        </div>\n    );\n};\n\nexport default Lobby;","import { Channel } from \"phoenix\";\ninterface INetworkObject {\n    gameChannel?: Channel,\n}\n\nconst network: INetworkObject = {}\n\nexport { network }","import React from 'react';\nimport { preProcessFile } from 'typescript';\nimport { network } from '../../services/channels';\nimport { PLAYER_ID } from '../../services/login';\nimport \"./style.css\"\n\ntype TSquare = {\n    value: string,\n    pos: number,\n    canMove: boolean,\n}\n\nconst Square = (props: TSquare) => {\n    const {value} = props\n\n    const sendMove = () => {\n        if(!props.canMove) return\n        network.gameChannel?.push(\"move\",{movedata: { pos: props.pos}})\n    }\n    return (\n        <button className=\"square\" onClick={sendMove}>\n\t\t    {value === \"0\" && \"\"}\n\t\t    {value === PLAYER_ID && \"X\"}\n\t\t    {value !== PLAYER_ID && value !== \"0\"  && \"O\"}\n\n        </button>\n    );\n};\n\nexport default Square;","import React from 'react';\nimport Square from '../square';\nimport \"./style.css\"\n\ntype TBoard = {\n    canMove: boolean,\n    board: string[],\n}\n\n\nconst Board:React.FC<TBoard> = ({canMove, board}) => {\n    let values = []\n    for(let i=1; i <= 9; i++){\n        values.push(i)\n    }    \n    return (\n        <div className=\"board\">\n            {values.map(value => \n                <Square value={board[value-1]} key={value} pos={value} canMove={canMove}/>\n            )}\n        </div>\n    );\n};\n\nexport default Board;","import React from \"react\"\n\nexport const NameContext = React.createContext({\n    playerName: \"\",\n    opponentName: \"\"\n})","import React from 'react';\nimport \"./style.css\"\n\ntype TBetController = {\n    onClick: (val:number)=> void,\n    canBet: boolean\n}\n\nconst BetController = (props: TBetController) => {\n    \n    const handleBetController = (val:number) => {\n        if(!props.canBet) return\n        props.onClick(val)\n    }\n    \n    return (\n        <div className=\"bet-controller\" style={{opacity: props.canBet?1:0}}>\n            <div className=\"up\" onClick={()=>handleBetController(1)}>U</div>\n            <div className=\"down\" onClick={()=>handleBetController(-1)}>D</div>\n        </div>\n    );\n};\n\nexport default BetController;","import React from 'react';\nimport { useLoading, Grid } from '@agney/react-loading';\nimport \"./style.css\"\n\ntype TPlayerHud = {\n    balance: number,\n    bet: number,\n    lid?: boolean,\n    name: string,\n    betWon: boolean\n}\nconst PlayerHud = (props: TPlayerHud) => {\n    const { containerProps, indicatorEl } = useLoading({\n        loading: true,\n        //@ts-ignore\n        indicator: <Grid width=\"30\"/>,\n      });\n    return (\n        <div className=\"player-hud\">\n            <div className=\"player-name\">\n                \n                {props.name}\n                </div>\n                {\n                    props.lid?\n                    <div className=\"wallet-container hud-spinner\" style={{backgroundColor: \"#fcbf49\"}}>\n                        WAITING\n                        <div>\n                        {indicatorEl}\n                    </div>\n                    </div>\n                    :\n                    <div className=\"wallet-container\" style={{backgroundColor: props.betWon?\"white\":\"transparent\"}}>\n                        <div className=\"wallet\">\n                            <div className=\"balance\">\n                                <div className=\"balance-text\">\n                                    BALANCE\n                                </div>\n                                <div className=\"balance-amount\">\n                                {props.balance}\n                                </div>\n                            </div>\n                            <div className=\"bet\">\n                            <div className=\"bet-text\">\n                                    BET\n                                </div>\n                                <div className=\"bet-amount\">\n                                {props.bet}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n               \n                }\n            {/* <div className=\"name\">{props.name}</div>\n            {\n                props.lid ? \n                <div className=\"waiting-lig\">WAITING</div>:\n                <>\n\n                <div className=\"balance\">{props.balance}</div>\n                <div className=\"bet\">{props.bet}</div>\n                </>\n            } */}\n        </div>\n    );\n};\n\nexport default PlayerHud;","import React, { createRef, useContext, useRef, useState } from 'react';\nimport { NameContext } from '../../context';\nimport BetController from '../bet-controller';\nimport PlayerHud from '../player-hud';\nimport \"./style.css\"\n\ntype THud = {\n    canBet: boolean,\n    betWon: boolean,\n    setBetAmount: (amount: number)=> void,\n    isOpponentVisible: boolean,\n    opponentData: {bet: number, balance: number},\n    playerData: {bet: number, balance: number},\n    betController: (val: number) => void\n}\n\nconst HUD:React.FC<THud> = ({canBet, betWon, setBetAmount, isOpponentVisible, opponentData, playerData, betController}) => {\n    const playerNames = useContext(NameContext)\n    return (\n        <div className=\"hud\">\n            <PlayerHud balance={playerData.balance} bet={playerData.bet} name={playerNames.playerName} betWon={!canBet&&betWon}/>\n            <BetController canBet={canBet} onClick={(val:number) => betController(val) }/>\n            <PlayerHud balance={opponentData.balance} bet={opponentData.bet} lid={!isOpponentVisible} name={playerNames.opponentName} betWon={!betWon}/>\n        </div>\n    );\n};\n\nexport default HUD;","import React from 'react';\nimport { PLAYER_ID } from '../../services/login';\nimport \"./style.css\"\n\ntype TResult = {\n    winner: string\n}\n\nconst Result:React.FC<TResult> = ({winner}) => {\n    let resultMessage = \"\"\n    let resultStatus = \"\"\n    if(winner === PLAYER_ID){\n        resultStatus = \"won\"\n        resultMessage = \"CONGRATULATIONS! YOU WON\"\n    }else{\n        resultStatus = \"lost\"\n        resultMessage = \"BETTER LUCK NEXT TIME!\"\n    }\n    return (\n        <div className=\"result-comp\">\n            {resultMessage}\n        </div>\n    );\n};\n\nexport default Result;","import React, { useEffect, useReducer, useState } from 'react';\nimport { useHistory, useLocation } from 'react-router';\nimport Board from '../../components/board';\nimport CustomButton from '../../components/custom-button';\nimport HUD from '../../components/hud';\nimport Result from '../../components/result';\nimport { NameContext } from '../../context';\nimport { network } from '../../services/channels';\nimport { PLAYER_ID } from '../../services/login';\nimport { connectToGameChannel } from '../../services/network';\n\nimport \"./style.css\"\n\ntype TGameChannelData = {\n        \n        gameChannelData: {\n        match_id: string,\n        players: any[]\n            \n        },\n        playerName: string\n}\n\ntype TGameLocation = {\n    state: TGameChannelData\n}\n\nconst Game = () => {\n\n    const history = useHistory()\n    const location: TGameLocation = useLocation();\n\n    console.log(\"DSB ~ file: index.tsx ~ line 32 ~ Game ~ location\", location);\n    if (!location.state) {\n        history.push({\n            pathname: \"/\",\n        });\n        // return <div></div>;\n    }\n\n    const [opponentName, setOpponentName] = useState(\"OPPONENT\")\n\n    const [isGameReady, setGameReady] = useState(false)\n    const [canBet, setBetStatus] = useState(true)\n    const [canMove, setMoveStatus] = useState(false)\n    const [isOpponentVisible, setOpponentHUDVisibility] = useState(false)\n    \n    const [betAmount, setBetAmount] = useState(0)\n    \n    const [opponentData, setOpponentData] = useState({bet: 0, balance: 100})\n    const [playerData, setPlayerData] = useState({bet: 0, balance: 100})\n    \n    const [board, setBoard] = useState([\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"])\n    const [isGameOver, setGameOver] = useState(false)\n    const [winner, setWinner] = useState(\"\")\n\n    useEffect(() => {\n        if(location.state){\n            \n            network.gameChannel = connectToGameChannel(location.state.gameChannelData, location.state.playerName)\n            network.gameChannel.join()\n            .receive(\"ok\", resp => {console.log(\"Joined game channel\", resp)})\n        \n            network.gameChannel.on(\"start_game_event\", (message) => {\n                console.log(\"On start_game_event\", message);\n                if(message.gamestate.player_1.id === PLAYER_ID){\n                    setOpponentName(message.gamestate.player_2.name)\n                }else{\n                    setOpponentName(message.gamestate.player_1.name)\n                }\n                setGameReady(true)\n            });\n        \n            network.gameChannel.on(\"bet_res\", (message) => {\n                console.log(\"bet_res\", message);\n                if(message.p1.id === PLAYER_ID){\n                    setOpponentData({bet: message.p2.bet, balance: message.p2.balance})\n                    setPlayerData({bet: message.p1.bet, balance: message.p1.balance})\n                }else{\n                    setOpponentData({bet: message.p1.bet, balance: message.p1.balance})\n                    setPlayerData({bet: message.p2.bet, balance: message.p2.balance})\n                }\n    \n                console.log(\"DSB ~ file: index.tsx ~ line 60 ~ network.gameChannel.on ~ message.turn\", message.turn);\n                console.log(\"DSB ~ file: index.tsx ~ line 61 ~ network.gameChannel.on ~ PLAYER_ID\", PLAYER_ID);\n                if(message.turn.id === \"continue\"){\n                    let newBoard = (message.board).map((val: any) => String(val))\n                    setBoard(newBoard)\n                    setBetStatus(true)\n                    setMoveStatus(false)\n                    setOpponentHUDVisibility(false)\n                }else{\n\n                    if(message.turn.id === PLAYER_ID) {\n                        setMoveStatus(true)\n                        console.log(\"YOU CAN MOVE\")\n                    }else{\n                        setMoveStatus(false)\n                        console.log(\"YOU CAN NOT MOVE\")\n                    }\n                    \n                    setOpponentHUDVisibility(true)\n                    setBetStatus(false)\n                }\n    \n            });\n    \n            network.gameChannel.on(\"move_res\", (message) => {\n                console.log(\"move_res\", message);\n                let newBoard = (message.board).map((val: any) => String(val))\n                if(message.p1.id === PLAYER_ID){\n                    setOpponentData({bet: message.p2.bet, balance: message.p2.balance})\n                    setPlayerData({bet: 0, balance: message.p1.balance})\n                }else{\n                    setOpponentData({bet: message.p1.bet, balance: message.p1.balance})\n                    setPlayerData({bet: 0, balance: message.p2.balance})\n                }\n                setBoard(newBoard)\n                setBetStatus(true)\n                setMoveStatus(false)\n                setOpponentHUDVisibility(false)\n            });\n    \n            network.gameChannel.on(\"game_res\", (message) => {\n                console.log(\"game_res\", message);\n                setWinner(message.winner)\n                let newBoard = (message.board).map((val: any) => String(val))\n                setBoard(newBoard)\n                setBetStatus(false)\n                setMoveStatus(false)\n                setGameOver(true)\n            });\n        }\n        \n    },[])\n\n    const goHome = () =>{\n        history.push({\n            pathname: \"/\",\n        });\n    }\n\n    const placeBet = () => {\n        if(!canBet) return\n        console.log(betAmount)\n        setBetStatus(false)\n        setMoveStatus(false)\n        network.gameChannel?.push(\"bet\",{betdata: {playerId: PLAYER_ID, bet: betAmount}})\n    }\n\n    const handleBetController = (val:number) => {\n        let newBalance = Math.max(0,Math.min(playerData.balance,playerData.balance-val))\n        let newBet = Math.max(0,Math.min(playerData.balance,playerData.bet+val))\n        // setBalanceA(newBalance)\n        // setBetA(newBet)\n        setPlayerData({bet: newBet, balance: newBalance})\n        setBetAmount(newBet)\n    }\n\n    return (\n        <div className=\"game\">\n            {\n                !isGameReady && \n                <div className=\"waiting\">\n                    WAITING...\n                </div>\n            }\n            {\n                isGameReady && \n                <div className=\"start-game\">\n                    <NameContext.Provider value={{playerName: location.state.playerName, opponentName: opponentName}}>\n                        <HUD canBet={canBet} betWon={canMove} setBetAmount={setBetAmount} isOpponentVisible={isOpponentVisible} opponentData={opponentData} playerData={playerData} betController={(val:number) => handleBetController(val)}/>\n                    </NameContext.Provider>\n                    <div className=\"bet-confirm\" style={{opacity: canBet?1:0}} >\n                        <div style={{width:\"30%\"}}>\n                            <CustomButton onClick={placeBet} text=\"CONFIRM\" backgroundColor={\"#ffd369\"}/>\n                        </div>\n                    </div>\n                    <Board canMove={canMove} board={board}/>\n                    {\n                    isGameOver && \n                    <>\n                        <Result winner={winner}/>\n                        <button className=\"btn-go-home\" onClick={goHome}>NEW MATCH</button>\n                    </>\n                    }\n                </div>\n\n            }\n        </div>\n    );\n};\n\nexport default Game;","import React from \"react\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport Menu from \"./pages/menu\"\nimport Lobby from \"./pages/lobby\";\nimport Game from \"./pages/game\";\n\n\nconst Routes: React.FC = (props) => {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={Menu} ></Route>\n        <Route exact path=\"/lobby\" component={Lobby} ></Route>\n        <Route exact path=\"/game\" component={Game} ></Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default Routes;\n","import React, { useEffect } from 'react';\nimport Routes from \"./routes\";\n\nimport './App.css';\n\n// import { channel } from './services/network';\n\nconst App: React.FC = () =>  {\n\n  // useEffect(() => {\n  //   channel.join().receive(\"ok\", (msg) => {\n  //     console.log(\"DSB: msg\", msg);\n  //   });\n  // }, [])\n\n  return (\n    <div className=\"App\">\n      <Routes/>\n    </div>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}