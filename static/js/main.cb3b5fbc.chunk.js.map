{"version":3,"sources":["components/input-playername/index.tsx","components/logo/index.tsx","components/custom-button/index.tsx","components/menu-button/index.tsx","components/menu-button-container/index.tsx","services/login.ts","services/network.ts","enums.ts","pages/menu/index.tsx","pages/lobby/index.tsx","services/channels.ts","components/square/index.tsx","components/board/index.tsx","utils.ts","components/hud/index.tsx","components/interactive-status-container/index.tsx","pages/game/index.tsx","routes.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["InputPlayername","props","className","htmlFor","placeholder","type","id","name","value","onChange","handleChange","spellCheck","Logo","style","backgroundColor","color","foregroundColor","CustomButton","onClick","text","MenuButton","width","animate","shouldResetWidth","roomName","handleOnChange","required","MenuButtonContainer","useState","index","toggleIndex","setGameMode","idx","mode","console","log","handleModeChange","onSubmit","confirm","PLAYER_ID","String","Math","floor","random","socket","Socket","params","playerId","connect","MESSAGE_TYPE","NOTICE_BOARD_STATUS","GAMESTATE","Menu","history","useHistory","gameMode","setRoomName","searching","setSearching","playerCount","setPlayerCount","localStorage","getItem","setName","matchmakerChannel","setMatchmakerChannel","setLobbyChannel","players","playersList","setPlayersList","useEffect","lobby","channel","join","receive","resp","on","message","onlinePlayers","Object","keys","i","length","joinees","joins","leftees","leaves","key","useLoading","loading","indicator","containerProps","indicatorEl","e","target","setItem","leave","gameData","matchmakerChannelName","maxPlayer","gameName","matchData","matchId","player_count","room_name","match_id","connectToMatchmakerChannel","gameChannelData","push","pathname","state","playerName","preventDefault","Lobby","network","Square","sign","canMove","gameChannel","movedata","pos","Board","board","winPattern","values","map","list","indexOf","HUD","balance","bet","gameState","balanceStyle","BETTING","GAMEOVER","display","toLocaleUpperCase","padStart","InteractiveStatusContainer","boardType","canClick","handlePlaceBetValueInput","placeBet","inputElem","useRef","inputBoardStyle","noticeBoardStyle","btnStyle","btnColorStyle","btnText","NOTICE","msg","WAITING_FOR_OPPONENT_BET","lang","en","waiting_for_op_bet","YOUR_MOVE","move","OPPONENT_MOVE","waiting_for_op_move","YOU_WON","you_won","EQUAL_BETS","equal_bet","PLACE_BET","place_bet","YOU_LOST","you_lost","ref","min","current","undefined","Game","location","useLocation","playerBetValue","setPlayerBetValue","noticeBoardStatus","setNoticeBoardStatus","messageType","setMessageType","setGameState","playerBalanceValue","setPlayerBalanceValue","canInputBet","setCanInputBet","setBoard","opponentBetValue","setOpponentBetValue","opponentBalanceValue","setOpponentBalanceValue","opponentName","setOpponentName","setWinPattern","matchmakerChannelMessage","connectToGameChannel","gamestate","player_1","player_2","p1","p2","turn","MOVING","MOVE_WAITING","newBoard","val","pattern","winner","BET_WAITING","event","Number","betdata","Routes","exact","path","component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"svBAiBeA,G,MAToC,SAACC,GAChD,OACI,sBAAKC,UAAU,mBAAf,UACI,uBAAOA,UAAU,aAAaC,QAAQ,QAAtC,kBACA,uBAAOD,UAAU,oBAAoBE,YAAa,YAAaC,KAAK,OAAOC,GAAG,QAAQC,KAAK,QAAQC,MAAOP,EAAMO,MAAOC,SAAUR,EAAMS,aAAcC,WAAW,eCoB7JC,G,MAxBc,SAACX,GAC1B,OACI,qBAAKC,UAAU,OAAf,SACI,qBAAKA,UAAU,aAAaW,MAAO,CAACC,gBAAiBb,EAAMa,iBAA3D,SACI,sBAAKZ,UAAU,aAAcW,MAAO,CAACE,MAAOd,EAAMe,iBAAlD,UACI,qBAAKd,UAAU,uBAAf,eACA,qBAAKA,UAAU,oBAAf,eACA,qBAAKA,UAAU,wBAAf,eAEA,qBAAKA,UAAU,qBAAf,eACA,qBAAKA,UAAU,kBAAf,eACA,qBAAKA,UAAU,sBAAf,eAEA,qBAAKA,UAAU,0BAAf,eACA,qBAAKA,UAAU,uBAAf,eACA,qBAAKA,UAAU,2BAAf,wBCJLe,G,MAV+B,SAAChB,GAC3C,OACI,qBAAKC,UAAU,gBAAf,SACI,yBAAQA,UAAU,MAAMgB,QAASjB,EAAMiB,QAASL,MAAO,CAACC,gBAAiBb,EAAMa,iBAAiB,WAAhG,UACKb,EAAMkB,KAAM,WC6DdC,G,MA5D2B,SAACnB,GAG1C,OACC,sBAAKC,UAAU,cAAf,UACC,qBACCA,UAAU,kBACVW,MAAO,CACNQ,MAAQpB,EAAMqB,QAEXrB,EAAMsB,iBACN,KACA,MAHA,MAJL,SAWC,uBACCrB,UAAU,oBACVG,KAAK,OACLC,GAAIL,EAAMkB,KACVf,YAnB4B,kBAoB5BI,MAAOP,EAAMuB,SACbf,SAAUR,EAAMwB,eAChBd,WAAW,QACIe,UAAQ,MAGzB,qBACCxB,UAAU,gBACVW,MAAO,CACNQ,MAAQpB,EAAMqB,QAEXrB,EAAMsB,iBACN,OACA,MAHA,QAJL,SAUC,cAAC,EAAD,CACCJ,KACElB,EAAMqB,QAEJrB,EAAMsB,iBACNtB,EAAMkB,KACN,KAHClB,EAAMsB,iBAAkBtB,EAAMkB,KAAK,YAMzBD,QAAUjB,EAAMsB,iBAC3B,aACAtB,EAAMiB,QAEVJ,gBACCb,EAAMsB,iBACJ,GACA,mBCTOI,G,MA/C6C,SAAC1B,GAAW,IAAD,EACtC2B,mBAAS,GAD6B,mBAC5DC,EAD4D,KACrDC,EADqD,KAGhEC,EAAc,SAACC,EAAaC,GAC/BC,QAAQC,IAAI,uDAAwDF,GACtEhC,EAAMmC,iBAAiBH,GACvBH,EAAYE,IAGb,OACC,qBAAK9B,UAAU,wBAAf,SACC,sBAAKW,MAAO,CAAEQ,MAAO,SAArB,UACC,qBAAKH,QAAS,kBAAMa,EAAY,EAAG,WAAnC,SACC,cAAC,EAAD,CACCb,QAASjB,EAAMoC,SACflB,KAAM,cACNG,SAAO,EACPC,iBAA4B,IAAVM,EAClBJ,eAAgBxB,EAAMwB,eACtBD,SAAUvB,EAAMuB,aAGlB,qBAAKN,QAAS,kBAAMa,EAAY,EAAG,SAAnC,SACC,cAAC,EAAD,CACCb,QAASjB,EAAMoC,SACflB,KAAM,YACNG,SAAO,EACPC,iBAA4B,IAAVM,EAClBJ,eAAgBxB,EAAMwB,eACtBD,SAAUvB,EAAMuB,aAGlB,qBAAKN,QAAS,kBAAMa,EAAY,EAAG,YAAnC,SACC,cAAC,EAAD,CACCb,QAASjB,EAAMoC,SACflB,KAAM,cACNI,iBAA4B,IAAVM,EAClBJ,eAAgBxB,EAAMwB,eACJD,SAAUvB,EAAMuB,SAChBc,SAAO,aClDlBC,EAAYC,OAAOC,KAAKC,MAAsB,IAAhBD,KAAKE,W,QCgBhDT,QAAQC,IAAI,iCAEX,IAAMS,EAAiB,IAAIC,SAAO,gDAAiD,CACnFC,OAAQ,CAAEC,SAAUR,KAErBK,EAAOI,U,MAIP,ICzBYC,EAWAC,EAMAC,ECwKGC,EAtKF,WACZ,IAAMC,EAAUC,cADE,EAEc1B,mBAAS,IAFvB,mBAEX2B,EAFW,KAEDxB,EAFC,OAGcH,mBAAS,IAHvB,mBAGXJ,EAHW,KAGDgC,EAHC,OAIgB5B,oBAAS,GAJzB,mBAIX6B,EAJW,KAIAC,EAJA,OAKoB9B,mBAAS,GAL7B,mBAKX+B,EALW,KAKEC,EALF,OAMMhC,mBAASiC,aAAaC,QAAQ,aAAetB,OAAOD,IAN1D,mBAMXhC,EANW,KAMLwD,EANK,OAOgCnC,qBAPhC,mBAOXoC,EAPW,KAOQC,EAPR,OAQsBrC,qBARtB,mBAQGsC,GARH,aASoBtC,mBAAS,GAT7B,mBAUduC,GAVc,UAUqB,IAVrB,EAWoBvC,mBAAmB,IAXvC,mBAWXwC,EAXW,KAWEC,EAXF,KAYlBC,qBAAU,WACT,IAAIC,EFgDa3B,EAAO4B,QAAP,YAA4B,CAAEzB,SAAUR,IE/CzDgC,EAAME,OAAOC,QAAQ,MAAM,SAACC,GAE3B,OADAzC,QAAQC,IAAI,eAAgBwC,GACrB,QAGRJ,EAAMK,GAAG,uBAAuB,SAACC,GAGhC,IADA,IAAIC,EAAgBC,OAAOC,KAAKH,GACxBI,EAAE,EAAEA,EAAEH,EAAcI,OAAOD,IAClCd,EAAQW,EAAcG,IAAM,EAC5BZ,EAAeU,OAAOC,KAAKb,OAG7BI,EAAMK,GAAG,iBAAiB,SAACC,GAK1B,IAHA,IAAIM,EAAUJ,OAAOC,KAAKH,EAAQO,OAC9BC,EAAUN,OAAOC,KAAKH,EAAQS,QAE1BL,EAAE,EAAGA,EAAEE,EAAQD,OAAOD,IAC1Bd,EAAQgB,EAAQF,MAGlBd,EAAQgB,EAAQF,IAAM,GAIxB,IAAI,IAAIA,EAAE,EAAGA,EAAEI,EAAQH,OAAOD,IAC7B,GAAGd,EAAQkB,EAAQJ,IAAI,CACtB,IAAIM,EAAMF,EAAQJ,UACXd,EAAQoB,GAIjBlB,EAAeU,OAAOC,KAAKb,IAC3BjC,QAAQC,IAAI,oEAAqE4C,OAAOC,KAAKb,OAE9FI,EAAMK,GAAG,kBAAkB,SAACC,GAC3B3C,QAAQC,IAAI,QAAS0C,MAEtBX,EAAgBK,KACf,IAtDgB,MAwDsBiB,YAAW,CAClDC,SAAS,EAETC,UAAW,cAAC,IAAD,CAAMrE,MAAM,SA3DN,EAwDVsE,eAxDU,EAwDMC,YAiExB,OACC,sBAAK1F,UAAU,OAAf,UAEC,cAAC,EAAD,CAAMY,gBAAiB,UAAWE,gBAAiB,YAEnD,cAAC,EAAD,CACCR,MAAOD,EACPG,aA5CS,SAACmF,GACZ9B,EAAQ8B,EAAEC,OAAOtF,OACjBqD,aAAakC,QAAQ,WAAYF,EAAEC,OAAOtF,UA4CxCiD,EACA,sBAAKvD,UAAU,YAAf,UACC,sBAAKA,UAAU,iBAAf,sBAEC,qBAAKA,UAAU,eAEhB,qBACAA,UAAU,gBAAgBW,MAAO,CAACQ,MAAO,QADzC,SAEA,cAAC,EAAD,CACCF,KAAM,qBAEND,QApDuB,WACV,OAAjB8C,QAAiB,IAAjBA,KAAmBgC,QACnBtC,GAAa,IAmDT5C,gBAAiB,iBAKnB,gCACC,sBAAKZ,UAAU,eAAf,UACC,sBAAMA,UAAU,YAAhB,oBACA,sBAAKA,UAAU,aAAf,oBACSkE,EAAYc,aAGtB,cAAC,EAAD,CACC7C,SA7DoB,WACxB,IAAI4D,EAAuB,CAC1BzE,WACAmC,cACAJ,SAAUA,GAAY,WAGvB,GAA0B,YAAtB0C,EAAS1C,UAA2B/B,EAAxC,CAIAkC,GAAa,GAEb,IAAIM,EFrG6B,SAACiC,GACnC/D,QAAQC,IACP,2EACA8D,GAED,IAAIC,EAAgC,GAChCC,EAAYF,EAAStC,YAErByC,EDhCoB,MCiCxB,OAAQH,EAAS1C,UAChB,IAAK,UACA0C,EAASzE,UACZ0E,EAAqB,4BAAwBD,EAASzE,SAAjC,YAA6C4E,EAA7C,YAAyDD,GACpEF,EAASzE,UAEnB0E,EAAqB,4BAAwBE,EAAxB,YAAoCD,GAG1D,MACD,IAAK,SACJD,EAAqB,4BAAwBD,EAASzE,SAAjC,YAA6C4E,EAA7C,eACXH,EAASzE,SACnB,MACD,IAAK,OACJ0E,EAAqB,4BAAwBD,EAASzE,SAAjC,YAA6C4E,EAA7C,eACXH,EAASzE,SACnB2E,GAAa,EAKf,IAAIE,EAAuC,CAC1C7E,SAAU0E,EACVvC,YAAawC,EACbG,QAASL,EAASzE,SAClB+B,SAAU0C,EAAS1C,UASpB,OANcX,EAAO4B,QAAQ0B,EAAuB,CACnDK,aAAcF,EAAU1C,YACxB6C,UAAWH,EAAU7E,SACrBiF,SAAUJ,EAAUC,QACpBrE,KAAMoE,EAAU9C,WE2DQmD,CAA2BT,GACnDjC,EAAkBS,OAAOC,QAAQ,MAAM,SAACC,GAEvC,OADAzC,QAAQC,IAAI,oBAAqBwC,GAC1B,QAGRX,EAAkBY,GAAG,qBAAqB,SAACC,GAnD3B,IAAC8B,EAoDhBzE,QAAQC,IAAI,uBAAwB0C,GACpCb,EAAkBgC,QArDFW,EAsDP9B,EArDVxB,EAAQuD,KAAK,CACZC,SAAU,QACVC,MAAO,CAAEH,kBAAiBI,WAAYxG,QAqDvC0D,EAAqBD,KAsCjB5B,iBAvFiB,SAACH,GACtBuB,EAAY,IACZI,EAAe,GACf7B,EAAYE,GAAc,YAqFtBT,SAAUA,EACVC,eAjFO,SAACoE,GACZA,EAAEmB,iBACFxD,EAAYqC,EAAEC,OAAOtF,iBCxFRyG,EARD,WACV,OACI,yCCCFC,EAA0B,GCqBjBC,G,MAfkB,SAAClH,GAAW,IAClCmH,EAAyCnH,EAAzCmH,KAAMvF,EAAmC5B,EAAnC4B,MAAOwF,EAA4BpH,EAA5BoH,QAASvG,EAAmBb,EAAnBa,gBAK7B,OACI,qBAAKZ,UAAU,SAASgB,QAJX,WAAO,IAAD,EACnBmG,IAAO,UAAIH,EAAQI,mBAAZ,OAAI,EAAqBV,KAAK,OAAO,CAACW,SAAU,CAAEC,IAAK3F,OAGnBhB,MAAO,CAACC,gBAAiBA,GAApE,SACI,qBAAKZ,UAAU,OAAf,SACQ,MAAPkH,EAAWA,EAAK,SCOdK,G,MAhBgB,SAACxH,GAG5B,IAHuC,IAChCyH,EAA8BzH,EAA9ByH,MAAOC,EAAuB1H,EAAvB0H,WAAYN,EAAWpH,EAAXoH,QACtBO,EAAS,GACL3C,EAAE,EAAGA,GAAK,EAAGA,IACjB2C,EAAOhB,KAAK3B,GAEhB,OACI,qBAAK/E,UAAY,QAAjB,SAEI0H,EACCC,KAAI,SAAAhG,GAAK,OAAI,cAAC,EAAD,CAAQwF,QAASA,EAASvG,iBCrBvBgH,EDqBqDH,ECrBxCnH,EDqBoDqB,EAAM,GCpBnE,IAAzBiG,EAAKC,QAAQvH,GDoBkF,UAAU,WAAW4G,KAAM5E,OAAOkF,EAAM7F,EAAM,IAAKA,MAAOA,GAAYY,KAAKE,UCrBtJ,IAACmF,EAAatH,U,SNA9ByC,O,yBAAAA,I,uDAAAA,I,iCAAAA,I,yBAAAA,I,qBAAAA,I,uBAAAA,I,2BAAAA,I,gBAAAA,M,cAWAC,O,qBAAAA,I,mBAAAA,I,wBAAAA,M,cAMAC,O,qBAAAA,I,6BAAAA,I,+BAAAA,I,mBAAAA,I,wBAAAA,M,eOOG6E,EAZY,SAAC/H,GAAW,IAC5BM,EAAwCN,EAAxCM,KAAM0H,EAAkChI,EAAlCgI,QAASC,EAAyBjI,EAAzBiI,IAAKC,EAAoBlI,EAApBkI,UAAWtH,EAASZ,EAATY,MAClCuH,EAAeD,IAAchF,EAAUkF,SAAWF,IAAchF,EAAUmF,SAAS,CAACC,QAAS,SAAS,CAACA,QAAS,QACpH,OACI,sBAAKrI,UAAU,MAAMW,MAAOA,EAA5B,UACI,qBAAKX,UAAU,OAAf,SAAuBK,EAAKiI,sBAC5B,sBAAKtI,UAAU,UAAUW,MAAOuH,EAAhC,sBAAwD5F,OAAOyF,GAASQ,SAAS,EAAE,QACnF,qBAAKvI,UAAU,MAAf,SAAsBsC,OAAO0F,GAAKO,SAAS,EAAE,W,eC6D1CC,EAnE0D,SAACzI,GAAW,IAC1E0I,EAAoE1I,EAApE0I,UAAW9D,EAAyD5E,EAAzD4E,QAAS+D,EAAgD3I,EAAhD2I,SAAUC,EAAsC5I,EAAtC4I,yBAA0BC,EAAY7I,EAAZ6I,SACzDC,EAAYC,iBAAO,MACrBC,EAAkB,CAAC5H,MAAO,QAASkH,QAAS,SAC5CW,EAAmB,CAAC7H,MAAO,MAAOkH,QAAS,QAC3CY,EAAW,CAAC9H,MAAO,OAAQkH,QAAS,SACpCa,EAAgBR,EAAS,CAAC9H,gBAAiB,sBAAsB,CAACA,gBAAiB,WACnFuI,EAAUV,IAAYzF,EAAoBoF,SAAS,KAAK,MACzDK,IAAYzF,EAAoBmF,SAC/BY,EAAkB,CAAC5H,MAAO,QAASkH,QAAS,SAC5CW,EAAmB,CAAC7H,MAAO,MAAOkH,QAAS,QAC3CY,EAAW,CAAC9H,MAAO,OAAQkH,QAAS,UAC/BI,IAAYzF,EAAoBoG,QACrCL,EAAkB,CAAC5H,MAAO,MAAOkH,QAAS,QAC1CW,EAAmB,CAAC7H,MAAO,QAASkH,QAAS,QAC7CY,EAAW,CAAC9H,MAAO,MAAOkH,QAAS,SAC9BI,IAAYzF,EAAoBoF,WACrCW,EAAkB,CAAC5H,MAAO,MAAOkH,QAAS,QAC1CW,EAAmB,CAAC7H,MAAO,QAASkH,QAAS,QAC7CY,EAAW,CAAC9H,MAAO,OAAQkH,QAAS,UAGxC,IAAIgB,EAAM,GACP1E,IAAU5B,EAAauG,yBACtBD,EAAME,EAAKC,GAAGC,mBACT9E,IAAY5B,EAAa2G,UAC9BL,EAAME,EAAKC,GAAGG,KACThF,IAAY5B,EAAa6G,cAC9BP,EAAME,EAAKC,GAAGK,oBACTlF,IAAY5B,EAAa+G,QAC9BT,EAAME,EAAKC,GAAGO,QACTpF,IAAY5B,EAAaiH,WAC9BX,EAAME,EAAKC,GAAGS,UACTtF,IAAY5B,EAAamH,UAC9Bb,EAAME,EAAKC,GAAGW,UACTxF,IAAY5B,EAAaqH,WAC9Bf,EAAME,EAAKC,GAAGa,UAclB,OACI,sBAAKrK,UAAU,eAAf,UACI,qBAAKA,UAAU,YAAYW,MAAOoI,EAAlC,SACI,uBAAO/I,UAAU,YAAYsK,IAAKzB,EAAWlI,MAAO,CAACQ,MAAO,QAASjB,YAAamJ,EAAKlJ,KAAK,SAASC,GAAG,SAASC,KAAK,SAASkK,IAAK,EAAGhK,SAAUoI,EAA0BlI,WAAW,YAE1L,qBAAKT,UAAU,eAAeW,MAAOqI,EAArC,SACI,8BACKK,MAGT,qBAAKrJ,UAAU,UAAUW,MAAOsI,EAAhC,SACI,wBAAQjJ,UAAU,UAAUgB,QAAS0H,EAtBzB,WACjBG,EAAU2B,UAETxI,QAAQC,IAAI,MAAM4G,EAAU2B,QAAQlK,OAEpCuI,EAAU2B,QAAQlK,WAAQmK,GAG9B7B,KAcsE,aAAQjI,MAAO,CAACC,gBAAiBsI,EAActI,gBAAiBO,MAAO,QAArI,SAA+IgI,UCkIhJuB,G,MAlLF,WACZ,IAAMvH,EAAUC,cACVuH,EAA0BC,cAFd,EAI0BlJ,mBAAS,GAJnC,mBAIXmJ,EAJW,KAIKC,EAJL,OAKgCpJ,mBACjDsB,EAAoBmF,SANH,mBAKX4C,EALW,KAKQC,EALR,OAQoBtJ,mBAASqB,EAAamH,WAR1C,mBAQXe,EARW,KAQEC,EARF,OASgBxJ,mBAASuB,EAAUkF,SATnC,mBASXF,EATW,KASAkD,EATA,OAUkCzJ,mBAAS,KAV3C,mBAUX0J,EAVW,KAUSC,EAVT,OAWoB3J,oBAAS,GAX7B,mBAWX4J,EAXW,KAWEC,EAXF,OAYQ7J,mBAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAZ1C,mBAYX8F,EAZW,KAYJgE,EAZI,OAc8B9J,mBAAS,GAdvC,mBAcX+J,EAdW,KAcOC,EAdP,OAesChK,mBAAS,KAf/C,mBAeXiK,EAfW,KAeWC,EAfX,OAgBsBlK,mBAAS,IAhB/B,mBAgBXmK,EAhBW,KAgBGC,GAhBH,QAiBkBpK,mBAAS,IAjB3B,qBAiBX+F,GAjBW,MAiBCsE,GAjBD,MAgGlB,GA7EA3H,qBAAU,WACLuG,EAAS/D,QACZI,EAAQI,YVyBkB,SAAC4E,EAA+B3L,GAC5D,IAAI+F,EAAU4F,EAAwB,SAGtC,OADkBtJ,EAAO4B,QAAP,UD1EM,MC0EN,YAA8B8B,GAAW,CAAE/F,SU5BrC4L,CACrBtB,EAAS/D,MAAMH,gBACfkE,EAAS/D,MAAMC,YAEhBG,EAAQI,YAAY7C,OAAOC,QAAQ,MAAM,SAACC,GACzCzC,QAAQC,IAAI,sBAAuBwC,MAGpCuC,EAAQI,YAAY1C,GAAG,oBAAoB,SAACC,GAC3C3C,QAAQC,IAAI,sBAAuB0C,GAC/BA,EAAQuH,UAAUC,SAAS/L,KAAOiC,EACrCyJ,GAAgBnH,EAAQuH,UAAUE,SAAS/L,MAE3CyL,GAAgBnH,EAAQuH,UAAUC,SAAS9L,MAE5CmL,EAAS7G,EAAQuH,UAAU1E,UAG5BR,EAAQI,YAAY1C,GAAG,WAAW,SAACC,GAClC3C,QAAQC,IAAI,UAAW0C,GACnBA,EAAQ0H,GAAGjM,KAAOiC,GACrBuJ,EAAwBjH,EAAQ2H,GAAGvE,SACnC2D,EAAoB/G,EAAQ2H,GAAGtE,OAE/B4D,EAAwBjH,EAAQ0H,GAAGtE,SACnC2D,EAAoB/G,EAAQ0H,GAAGrE,MAGR,aAApBrD,EAAQ4H,KAAKnM,IAChB0K,EAAkB,GAClBK,EAAalI,EAAUkF,SACvB+C,EAAenI,EAAaiH,YAC5BgB,EAAqBhI,EAAoBmF,UAErCxD,EAAQ4H,KAAKnM,KAAOiC,GACvB8I,EAAalI,EAAUuJ,QACvBtB,EAAenI,EAAa2G,aAE5ByB,EAAalI,EAAUwJ,cACvBvB,EAAenI,EAAa6G,mBAK/B5C,EAAQI,YAAY1C,GAAG,YAAY,SAACC,GACnC,IAAI+H,EAAW/H,EAAQ6C,MAAMG,KAAI,SAACgF,GAAD,OAChCA,IAAQtK,EAAY,IAAc,IAARsK,EAAY,IAAM,KAE7CnB,EAASkB,GACT5B,EAAkB,GAClBK,EAAalI,EAAUkF,SACvB6C,EAAqBhI,EAAoBmF,SACzC+C,EAAenI,EAAamH,WACxBvF,EAAQ0H,GAAGjM,MAKhB4G,EAAQI,YAAY1C,GAAG,YAAY,SAACC,GACnCoH,GAAcpH,EAAQiI,SACtB,IAAIF,EAAW/H,EAAQ6C,MAAMG,KAAI,SAACgF,GAAD,OAChCA,IAAQtK,EAAY,IAAc,IAARsK,EAAY,IAAM,KAE7CnB,EAASkB,GACT1B,EAAqBhI,EAAoBoF,UACzC+C,EAAalI,EAAUmF,UACnBzD,EAAQkI,SAAWxK,EACtB6I,EAAenI,EAAa+G,SAE5BoB,EAAenI,EAAaqH,gBAI7B,KAEEO,EAAS/D,MAIb,OAHAzD,EAAQuD,KAAK,CACZC,SAAU,MAEJ,6BAmCR,OACC,sBAAK3G,UAAU,OAAf,UACC,sBAAKA,UAAU,gBAAf,UACC,cAAC,EAAD,CACCK,KAAMsK,EAAS/D,MAAMC,WACrBmB,IAAK6C,EACL9C,QACCE,IAAchF,EAAUmF,SACrBgD,EACAA,EAAqBP,EAEzB5C,UAAWA,EACXtH,MAAO,CAAEC,gBAAiB,aAE3B,cAAC,EAAD,CACCP,KAAMwL,EACN7D,IACCC,IAAchF,EAAU6J,aACxB7E,IAAchF,EAAUkF,QACrB,MACAsD,EAEJ1D,QAAS4D,EACT1D,UAAWA,EACXtH,MAAO,CAAEC,gBAAiB,gBAG5B,cAAC,EAAD,CACC6H,UAAWsC,EACXrC,SAAU4C,EACV3G,QAASsG,EACTtC,yBAzD8B,SAChCoE,GAEAA,EAAMjG,iBACN,IAAI6F,EAAMK,OAAOD,EAAMnH,OAAOtF,OAC9B0B,QAAQC,IAAI0K,GAERA,EADiBvB,GACOuB,EAAM,EACjCpB,GAAe,IAGhBA,GAAe,GACfT,EAAkBkC,OAAOL,MA8CvB/D,SAAUX,IAAchF,EAAUmF,SAhEtB,WACdjF,EAAQuD,KAAK,CACZC,SAAU,OAmBK,WAAO,IAAD,EAClBsB,IAAchF,EAAUkF,UAC5B,UAAAnB,EAAQI,mBAAR,SAAqBV,KAAK,MAAO,CAChCuG,QAAS,CAAEpK,SAAUR,EAAW2F,IAAK6C,KAEtCQ,EAAsBD,EAAqBP,GAC3CM,EAAalI,EAAU6J,aACvB9B,EAAqBhI,EAAoBoG,QACzC8B,EAAenI,EAAauG,8BAqC3B,cAAC,EAAD,CACC9B,MAAOA,EACPC,WAAYA,GACZN,QAASc,IAAchF,EAAUuJ,cClLtBU,EAZU,SAACnN,GACxB,OACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOoN,OAAK,EAACC,KAAK,IAAIC,UAAWnK,IACjC,cAAC,IAAD,CAAOiK,OAAK,EAACC,KAAK,SAASC,UAAWtG,IACtC,cAAC,IAAD,CAAOoG,OAAK,EAACC,KAAK,QAAQC,UAAW3C,UCQ9B4C,G,MAfO,WAQpB,OACE,qBAAKtN,UAAU,MAAf,SACE,cAAC,EAAD,QCHSuN,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.cb3b5fbc.chunk.js","sourcesContent":["import React, { ChangeEvent } from 'react';\nimport \"./style.css\"\n\ntype TInputPlayername = {\n    value: string,\n    handleChange: (event: ChangeEvent<HTMLInputElement>) => void\n}\n\nconst InputPlayername:React.FC<TInputPlayername> = (props) => {\n    return (\n        <div className=\"input-playername\">\n            <label className=\"name-label\" htmlFor=\"fname\">name</label>\n            <input className=\"pname-input-field\" placeholder={\"your name\"} type=\"text\" id=\"fname\" name=\"fname\" value={props.value} onChange={props.handleChange} spellCheck=\"false\"/>\n        </div>\n    );\n};\n\nexport default InputPlayername;","import React from 'react';\nimport \"./style.css\"\n\ntype TLogo = {\n    backgroundColor: string,\n    foregroundColor: string\n}\n\nconst Logo:React.FC<TLogo> = (props) => {\n    return (\n        <div className=\"logo\">\n            <div className=\"background\" style={{backgroundColor: props.backgroundColor}}>\n                <div className=\"foreground\"  style={{color: props.foregroundColor}}>\n                    <div className=\"logo-square top left\">B</div>\n                    <div className=\"logo-square top c\">E</div>\n                    <div className=\"logo-square top right\">T</div>\n\n                    <div className=\"logo-square m left\">T</div>\n                    <div className=\"logo-square m c\">A</div>\n                    <div className=\"logo-square m right\">C</div>\n\n                    <div className=\"logo-square bottom left\">T</div>\n                    <div className=\"logo-square bottom c\">O</div>\n                    <div className=\"logo-square bottom right\">E</div>\n                </div>\n\n            </div>\n\n        </div>\n    );\n};\n\nexport default Logo;","import React, { FormEvent } from \"react\";\nimport \"./style.css\";\n\ntype TCustomButton = {\n    text: string;\n    onClick: () => void;\n    backgroundColor?: string\n};\n\nconst CustomButton: React.FC<TCustomButton> = (props) => {\n    return (\n        <div className=\"custom-button\">\n            <button className=\"btn\" onClick={props.onClick} style={{backgroundColor: props.backgroundColor||\"#e5e5e5\"}}>\n                {props.text}{\" \"}\n            </button>\n        </div>\n    );\n};\n\nexport default CustomButton;\n","import React, { useState } from \"react\";\nimport CustomButton from \"../custom-button\";\nimport \"./style.css\";\n\ntype TMenuButton = {\n\ttext: string;\n\tonClick: () => void;\n    animate?: boolean;\n    confirm?:boolean\n\tshouldResetWidth: boolean;\n\thandleOnChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n\troomName: string;\n};\n\nconst MenuButton: React.FC<TMenuButton> = (props) => {\n\tconst placeholderText: string = \"Enter room name\";\n\n\treturn (\n\t\t<div className=\"menu-button\">\n\t\t\t<div\n\t\t\t\tclassName=\"input-component\"\n\t\t\t\tstyle={{\n\t\t\t\t\twidth: !props.animate\n\t\t\t\t\t\t? \"0%\"\n\t\t\t\t\t\t: props.shouldResetWidth\n\t\t\t\t\t\t? \"0%\"\n\t\t\t\t\t\t: \"70%\",\n                }}\n                \n\t\t\t>\n\t\t\t\t<input\n\t\t\t\t\tclassName=\"rname-input-field\"\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tid={props.text}\n\t\t\t\t\tplaceholder={placeholderText}\n\t\t\t\t\tvalue={props.roomName}\n\t\t\t\t\tonChange={props.handleOnChange}\n\t\t\t\t\tspellCheck=\"false\"\n                    required\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div\n\t\t\t\tclassName=\"btn-component\"\n\t\t\t\tstyle={{\n\t\t\t\t\twidth: !props.animate\n\t\t\t\t\t\t? \"100%\"\n\t\t\t\t\t\t: props.shouldResetWidth\n\t\t\t\t\t\t? \"100%\"\n\t\t\t\t\t\t: \"30%\",\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<CustomButton\n\t\t\t\t\ttext={\n\t\t\t\t\t\t!props.animate\n\t\t\t\t\t\t\t?  props.shouldResetWidth? props.text:\"CONFIRM ?\"\n\t\t\t\t\t\t\t: props.shouldResetWidth\n\t\t\t\t\t\t\t? props.text\n\t\t\t\t\t\t\t: \"GO\"\n\t\t\t\t\t}\n\n                    onClick={ props.shouldResetWidth\n\t\t\t\t\t\t\t? () => {}\n\t\t\t\t\t\t\t: props.onClick\n\t\t\t\t\t}\n\t\t\t\t\tbackgroundColor={\n\t\t\t\t\t\tprops.shouldResetWidth\n\t\t\t\t\t\t? \"\"\n\t\t\t\t\t\t: \"#ffd369\"}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default MenuButton;\n","import React, { useState } from \"react\";\nimport MenuButton from \"../menu-button\";\nimport \"./style.css\";\n\ntype TMenuButtonContainer = {\n\tonSubmit: () => void;\n\thandleOnChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n\troomName: string;\n\thandleModeChange: (gameMode: string) => void;\n};\n\nconst MenuButtonContainer: React.FC<TMenuButtonContainer> = (props) => {\n    const [index, toggleIndex] = useState(0);\n    \n\tconst setGameMode = (idx: number, mode: string) => {\n    console.log(\"DSB ~ file: index.tsx ~ line 16 ~ setGameMode ~ mode\", mode);\n\t\tprops.handleModeChange(mode);\n\t\ttoggleIndex(idx);\n\t};\n\n\treturn (\n\t\t<div className=\"menu-button-container\">\n\t\t\t<div style={{ width: \"262px\" }}>\n\t\t\t\t<div onClick={() => setGameMode(1, \"create\")}>\n\t\t\t\t\t<MenuButton\n\t\t\t\t\t\tonClick={props.onSubmit}\n\t\t\t\t\t\ttext={\"CREATE ROOM\"}\n\t\t\t\t\t\tanimate\n\t\t\t\t\t\tshouldResetWidth={index !== 1}\n\t\t\t\t\t\thandleOnChange={props.handleOnChange}\n\t\t\t\t\t\troomName={props.roomName}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div onClick={() => setGameMode(2, \"join\")}>\n\t\t\t\t\t<MenuButton\n\t\t\t\t\t\tonClick={props.onSubmit}\n\t\t\t\t\t\ttext={\"JOIN ROOM\"}\n\t\t\t\t\t\tanimate\n\t\t\t\t\t\tshouldResetWidth={index !== 2}\n\t\t\t\t\t\thandleOnChange={props.handleOnChange}\n\t\t\t\t\t\troomName={props.roomName}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div onClick={() => setGameMode(3, \"default\")}>\n\t\t\t\t\t<MenuButton\n\t\t\t\t\t\tonClick={props.onSubmit}\n\t\t\t\t\t\ttext={\"RANDOM ROOM\"}\n\t\t\t\t\t\tshouldResetWidth={index !== 3}\n\t\t\t\t\t\thandleOnChange={props.handleOnChange}\n                        roomName={props.roomName}\n                        confirm\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default MenuButtonContainer;\n","export const PLAYER_ID = String(Math.floor(Math.random() * 100000 ))\nexport const GAME_NAME = \"btt\"","import { Socket } from \"phoenix\";\nimport { GAME_NAME, PLAYER_ID } from \"./login\";\n\nexport type TMatchmakerChannelOptions = {\n\tplayerCount: number;\n\troomName: string;\n\tmatchId: string;\n\tgameMode: string;\n};\n\nexport type TMatchData = {\n\tplayerCount: number;\n\troomName: string;\n\tgameMode: string;\n};\n\nconsole.log(\"connecting to btt server ....\");\n// const socket: Socket = new Socket(\"ws://localhost:4000/socket\", {\n\tconst socket: Socket = new Socket(\"wss://still-plains-97814.herokuapp.com/socket\", {\n\tparams: { playerId: PLAYER_ID },\n});\nsocket.connect();\n\n// const channel: Channel = socket.channel(\"room:home\", {});\n\nconst connectToMatchmakerChannel = (gameData: TMatchData) => {\n\tconsole.log(\n\t\t\"DSB ~ file: network.ts ~ line 27 ~ connectToMatchmakerChannel ~ gameData\",\n\t\tgameData\n\t);\n\tlet matchmakerChannelName: string = \"\";\n\tlet maxPlayer = gameData.playerCount;\n\tlet matchId: string = \"\";\n\tlet gameName: string = GAME_NAME;\n\tswitch (gameData.gameMode) {\n\t\tcase \"default\":\n\t\t\tif (gameData.roomName) {\n\t\t\t\tmatchmakerChannelName = `garuda_matchmaker:${gameData.roomName}:${gameName}:${maxPlayer}`;\n\t\t\t\tmatchId = gameData.roomName;\n\t\t\t} else {\n\t\t\t\tmatchmakerChannelName = `garuda_matchmaker:${gameName}:${maxPlayer}`;\n\t\t\t\tmatchId = \"\";\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"create\":\n\t\t\tmatchmakerChannelName = `garuda_matchmaker:${gameData.roomName}:${gameName}:createjoin`;\n\t\t\tmatchId = gameData.roomName;\n\t\t\tbreak;\n\t\tcase \"join\":\n\t\t\tmatchmakerChannelName = `garuda_matchmaker:${gameData.roomName}:${gameName}:createjoin`;\n\t\t\tmatchId = gameData.roomName;\n\t\t\tmaxPlayer = -1;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t}\n\tlet matchData: TMatchmakerChannelOptions = {\n\t\troomName: matchmakerChannelName,\n\t\tplayerCount: maxPlayer,\n\t\tmatchId: gameData.roomName,\n\t\tgameMode: gameData.gameMode,\n\t};\n\n\tlet channel = socket.channel(matchmakerChannelName, {\n\t\tplayer_count: matchData.playerCount,\n\t\troom_name: matchData.roomName,\n\t\tmatch_id: matchData.matchId,\n\t\tmode: matchData.gameMode,\n\t});\n\treturn channel;\n};\n\nconst connectToGameChannel = (matchmakerChannelMessage: any, name: string) => {\n\tlet matchId = matchmakerChannelMessage[\"match_id\"];\n\tlet gameName = GAME_NAME;\n\tlet gameChannel = socket.channel(`${gameName}:${matchId}`, { name });\n\treturn gameChannel;\n};\n\nconst connectToGameLobbyChannel = () => {\n\tlet gameChannel = socket.channel(`lobby:btt`, { playerId: PLAYER_ID });\n\treturn gameChannel;\n};\n\nexport { socket, connectToMatchmakerChannel, connectToGameChannel, connectToGameLobbyChannel };\n","export enum MESSAGE_TYPE{\n    PLACE_BET,\n    WAITING_FOR_OPPONENT_BET,\n    OPPONENT_MOVE,\n    YOUR_MOVE,\n    YOU_WON,\n    YOU_LOST,\n    EQUAL_BETS,\n    NONE\n}\n\nexport enum NOTICE_BOARD_STATUS{\n    BETTING,\n    NOTICE,\n    GAMEOVER\n}\n\nexport enum GAMESTATE{\n    BETTING,\n    BET_WAITING,\n    MOVE_WAITING,\n    MOVING,\n    GAMEOVER\n}\n\n// export const message = {\n//     PLACE_BET: \"PLACE YOUR BETS\"\n//     WAITING_FOR_OPPONENT_BET: \"WAITING FOR \",\n//     OPPONENT_MOVE,\n//     YOUR_MOVE,\n//     YOU_WON,\n//     YOU_LOST\n// }","import React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useLoading, Bars } from \"@agney/react-loading\";\n\nimport InputPlayername from \"../../components/input-playername\";\nimport Logo from \"../../components/logo\";\nimport MenuButtonContainer from \"../../components/menu-button-container\";\nimport { PLAYER_ID } from \"../../services/login\";\nimport {\n\tconnectToGameLobbyChannel,\n\tconnectToMatchmakerChannel,\n\tTMatchData,\n} from \"../../services/network\";\n\nimport \"./style.css\";\nimport CustomButton from \"../../components/custom-button\";\nimport { Channel } from \"phoenix\";\nimport { network } from \"../../services/channels\";\n\nconst Menu = () => {\n\tconst history = useHistory();\n\tconst [gameMode, setGameMode] = useState(\"\");\n\tconst [roomName, setRoomName] = useState(\"\");\n\tconst [searching, setSearching] = useState(false);\n\tconst [playerCount, setPlayerCount] = useState(2);\n\tconst [name, setName] = useState(localStorage.getItem(\"btt-name\") || String(PLAYER_ID));\n\tconst [matchmakerChannel, setMatchmakerChannel] = useState<Channel>();\n\tconst [lobbyChannel, setLobbyChannel] = useState<Channel>();\n\tconst [onlineCount, setOnlineCount] = useState(0);\n\tlet players:{ [index: string]: any } = {}\n\tconst [playersList, setPlayersList] = useState<string[]>([])\n\tuseEffect(()=>{\n\t\tlet lobby = connectToGameLobbyChannel()\n\t\tlobby.join().receive(\"ok\", (resp) => {\n\t\t\tconsole.log(\"Joined Lobby\", resp);\n\t\t\treturn \"ok\";\n\t\t});\n\t\t\n\t\tlobby.on(\"presence_game_state\", (message) => {\n\t\t\t// console.log(\"ONLINE\", message);\n\t\t\tlet onlinePlayers = Object.keys(message)\n\t\t\tfor(let i=0;i<onlinePlayers.length;i++){\n\t\t\t\tplayers[onlinePlayers[i]] = 1\n\t\t\t\tsetPlayersList(Object.keys(players))\n\t\t\t}\n\t\t});\n\t\tlobby.on(\"presence_diff\", (message) => {\n\t\t\t// console.log(\"DIFF\", message);\n\t\t\tlet joinees = Object.keys(message.joins)\n\t\t\tlet leftees = Object.keys(message.leaves)\n\n\t\t\tfor(let i=0; i<joinees.length;i++){\n\t\t\t\tif(players[joinees[i]]){\n\n\t\t\t\t}else{\n\t\t\t\t\tplayers[joinees[i]] = 1\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor(let i=0; i<leftees.length;i++){\n\t\t\t\tif(players[leftees[i]]){\n\t\t\t\t\tlet key = leftees[i]\n\t\t\t\t\tdelete players[key]\n\t\t\t\t}else{\n\t\t\t\t}\n\t\t\t}\n\t\t\tsetPlayersList(Object.keys(players))\n\t\t\tconsole.log(\"DSB ~ file: index.tsx ~ line 62 ~ lobby.on ~ Object.keys(players)\", Object.keys(players));\n\t\t});\n\t\tlobby.on(\"presence_state\", (message) => {\n\t\t\tconsole.log(\"STATE\", message);\n\t\t});\n\t\tsetLobbyChannel(lobby)\n\t},[])\n\n\tconst { containerProps, indicatorEl } = useLoading({\n\t\tloading: true,\n\t\t//@ts-ignore\n\t\tindicator: <Bars width=\"20\" />,\n\t});\n\n\tconst goToGame = (gameChannelData: any) => {\n\t\thistory.push({\n\t\t\tpathname: \"/game\",\n\t\t\tstate: { gameChannelData, playerName: name },\n\t\t});\n\t};\n\n\tconst onSetGameMode = (mode?: string) => {\n\t\tsetRoomName(\"\");\n\t\tsetPlayerCount(2);\n\t\tsetGameMode(mode ? mode : \"default\");\n\t};\n\n\tconst handleRoomNameChange: (\n\t\tevent: React.ChangeEvent<HTMLInputElement>\n\t) => void = (e) => {\n\t\te.preventDefault();\n\t\tsetRoomName(e.target.value);\n\t};\n\n\tconst handlePlayerNameChange: (\n\t\tevent: React.ChangeEvent<HTMLInputElement>\n\t) => void = (e) => {\n\t\tsetName(e.target.value);\n\t\tlocalStorage.setItem(\"btt-name\", e.target.value);\n\t};\n\n\tconst onCancelMatchmaking = () => {\n\t\tmatchmakerChannel?.leave()\n\t\tsetSearching(false);\n\t}\n\n\tconst requestStartGame = () => {\n\t\tlet gameData: TMatchData = {\n\t\t\troomName,\n\t\t\tplayerCount,\n\t\t\tgameMode: gameMode || \"default\",\n\t\t};\n\n\t\tif (gameData.gameMode !== \"default\" && !roomName) {\n\t\t\treturn;\n\t\t}\n\n\t\tsetSearching(true);\n\n\t\tlet matchmakerChannel = connectToMatchmakerChannel(gameData);\n\t\tmatchmakerChannel.join().receive(\"ok\", (resp) => {\n\t\t\tconsole.log(\"Joined matchmaker\", resp);\n\t\t\treturn \"ok\";\n\t\t});\n\n\t\tmatchmakerChannel.on(\"match_maker_event\", (message) => {\n\t\t\tconsole.log(\"On match maker event\", message);\n\t\t\tmatchmakerChannel.leave();\n\t\t\tgoToGame(message);\n\t\t});\n\t\tsetMatchmakerChannel(matchmakerChannel)\n\t};\n\n\treturn (\n\t\t<div className=\"menu\">\n\t\t\t\n\t\t\t<Logo backgroundColor={\"#ffd369\"} foregroundColor={\"#393e46\"} />\n\n\t\t\t<InputPlayername\n\t\t\t\tvalue={name}\n\t\t\t\thandleChange={handlePlayerNameChange}\n\t\t\t/>\n\t\t\t{searching ? (\n\t\t\t\t<div className=\"searching\">\n\t\t\t\t\t<div className=\"searching-text\">\n\t\t\t\t\t\tSEARCHING\n\t\t\t\t\t\t<div className=\"loading\"></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div\n\t\t\t\t\tclassName=\"btn-component\" style={{width: \"100%\"}}>\n\t\t\t\t\t<CustomButton\n\t\t\t\t\t\ttext={\"CANCEL MATCHMAKING\"}\n\n\t\t\t\t\t\tonClick={onCancelMatchmaking}\n\t\t\t\t\t\tbackgroundColor={\"#fefefe\"}\n\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\t<div>\n\t\t\t\t\t<div className=\"online-count\">\n\t\t\t\t\t\t<span className=\"logged-in\">●</span>\n\t\t\t\t\t\t<div className=\"online-txt\">\n\t\t\t\t\t\t\tonline {playersList.length}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\t\n\t\t\t\t\t<MenuButtonContainer\n\t\t\t\t\t\tonSubmit={requestStartGame}\n\t\t\t\t\t\thandleModeChange={onSetGameMode}\n\t\t\t\t\t\troomName={roomName}\n\t\t\t\t\t\thandleOnChange={handleRoomNameChange}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default Menu;\n","import React from 'react';\n\nconst Lobby = () => {\n    return (\n        <div>\n            Lobby\n        </div>\n    );\n};\n\nexport default Lobby;","import { Channel } from \"phoenix\";\ninterface INetworkObject {\n    gameChannel?: Channel,\n}\n\nconst network: INetworkObject = {}\n\nexport { network }","import React from 'react';\nimport { network } from '../../services/channels';\nimport \"./style.css\"\n\ntype TSquare = {\n    sign: string,\n    index: number,\n    canMove: boolean\n    backgroundColor: string\n}\n\nconst Square:React.FC<TSquare> = (props) => {\n    const {sign, index, canMove, backgroundColor} = props\n    \n    const sendMove = () => {\n        canMove && network.gameChannel?.push(\"move\",{movedata: { pos: index}})\n    }\n    return (\n        <div className=\"square\" onClick={sendMove} style={{backgroundColor: backgroundColor}}>\n            <div className=\"sign\">\n            {sign!==\"0\"?sign:\"\"}\n            </div>\n        </div>\n    );\n};\n\nexport default Square;","import React from 'react';\nimport { listContains } from '../../utils';\nimport Square from '../square';\nimport \"./style.css\"\n\ntype TBoard = {\n    board: (string|number)[],\n    winPattern: number[],\n    canMove: boolean\n}\n\nconst Board:React.FC<TBoard> = (props) => {\n    const {board, winPattern, canMove} = props\n    let values = []\n    for(let i=1; i <= 9; i++){\n        values.push(i)\n    }\n    return (\n        <div className = \"board\">\n            {\n            values\n            .map(index => <Square canMove={canMove} backgroundColor={listContains(winPattern, index-1)?\"#ffeaa7\":\"#E5E5E5\"} sign={String(board[index-1])} index={index} key={Math.random()}/>)\n            }\n        </div>\n    );\n};\n\nexport default Board;\n\n// #E5E5E5\n// #ffeaa7","export const listContains = (list: any[], value: any) => {\n\treturn list.indexOf(value) !== -1;\n};","import React from 'react';\nimport { GAMESTATE } from '../../enums';\nimport \"./style.css\"\n\ntype THUD = {\n    name: string,\n    balance: number,\n    bet: number|string,\n    style: {backgroundColor: string},\n    gameState: GAMESTATE\n}\n\nconst HUD:React.FC<THUD> = (props) => {\n    const {name, balance, bet, gameState, style} = props\n    let balanceStyle = gameState === GAMESTATE.BETTING || gameState === GAMESTATE.GAMEOVER?{display: \"block\"}:{display: \"none\"}\n    return (\n        <div className=\"hud\" style={style}>\n            <div className=\"name\">{name.toLocaleUpperCase()}</div>\n            <div className=\"balance\" style={balanceStyle}>BALANCE: {String(balance).padStart(3,\"0\")}</div>\n            <div className=\"bet\">{String(bet).padStart(2,\"0\")}</div>\n        </div>\n    );\n};\n\nexport default HUD;","import React, { ChangeEvent, useRef, useState } from 'react';\nimport { NOTICE_BOARD_STATUS, MESSAGE_TYPE } from '../../enums';\nimport \"./style.css\"\nimport lang from \"../../lang.json\"\n\ntype TInteractiveStatusContainer = {\n    boardType: NOTICE_BOARD_STATUS,\n    message: MESSAGE_TYPE,\n    handlePlaceBetValueInput: (event: ChangeEvent<HTMLInputElement>) => void\n    placeBet: () => void\n    canClick: boolean\n}\n\nconst InteractiveStatusContainer:React.FC<TInteractiveStatusContainer> = (props) => {\n    const {boardType, message, canClick, handlePlaceBetValueInput, placeBet} = props\n    const inputElem = useRef(null);\n    let inputBoardStyle = {width: \"212px\", display: \"block\"}\n    let noticeBoardStyle = {width: \"0px\", display: \"none\"}\n    let btnStyle = {width: \"50px\", display: \"block\"}\n    let btnColorStyle = canClick?{backgroundColor: \"rgb(255, 211, 105)\"}:{backgroundColor: \"#8395a7\"}\n    let btnText = boardType===NOTICE_BOARD_STATUS.GAMEOVER?\"GO\":\"BET\"\n    if(boardType===NOTICE_BOARD_STATUS.BETTING){\n        inputBoardStyle = {width: \"212px\", display: \"block\"}\n        noticeBoardStyle = {width: \"0px\", display: \"none\"}\n        btnStyle = {width: \"50px\", display: \"block\"}\n    }else if(boardType===NOTICE_BOARD_STATUS.NOTICE){\n        inputBoardStyle = {width: \"0px\", display: \"none\"}\n        noticeBoardStyle = {width: \"262px\", display: \"flex\"}\n        btnStyle = {width: \"0px\", display: \"none\"}\n    }else if(boardType===NOTICE_BOARD_STATUS.GAMEOVER){\n        inputBoardStyle = {width: \"0px\", display: \"none\"}\n        noticeBoardStyle = {width: \"212px\", display: \"flex\"}\n        btnStyle = {width: \"50px\", display: \"block\"}\n    }\n\n    let msg = \"\"\n    if(message===MESSAGE_TYPE.WAITING_FOR_OPPONENT_BET){\n        msg = lang.en.waiting_for_op_bet\n    }else if(message === MESSAGE_TYPE.YOUR_MOVE){\n        msg = lang.en.move\n    }else if(message === MESSAGE_TYPE.OPPONENT_MOVE){\n        msg = lang.en.waiting_for_op_move\n    }else if(message === MESSAGE_TYPE.YOU_WON){\n        msg = lang.en.you_won\n    }else if(message === MESSAGE_TYPE.EQUAL_BETS){\n        msg = lang.en.equal_bet\n    }else if(message === MESSAGE_TYPE.PLACE_BET){\n        msg = lang.en.place_bet\n    }else if(message === MESSAGE_TYPE.YOU_LOST){\n        msg = lang.en.you_lost\n    }\n\n    const clearInputField = () => {\n        if(inputElem.current){\n            //@ts-ignore\n            console.log(\"ICI\",inputElem.current.value)\n            //@ts-ignore\n            inputElem.current.value = undefined\n            \n        }\n        placeBet()\n    }\n\n    return (\n        <div className=\"status-board\">\n            <div className=\"bet-input\" style={inputBoardStyle}>\n                <input className=\"bet-input\" ref={inputElem} style={{width: \"100%\"}} placeholder={msg} type=\"number\" id=\"betval\" name=\"betval\" min={0} onChange={handlePlaceBetValueInput} spellCheck=\"false\"/>\n            </div>\n            <div className=\"notice-board\" style={noticeBoardStyle}>\n                <div>\n                    {msg}\n                </div>\n            </div>\n            <div className=\"bet-btn\" style={btnStyle}>\n                <button className=\"bet-btn\" onClick={canClick?clearInputField:()=>{}} style={{backgroundColor: btnColorStyle.backgroundColor, width: \"100%\"}}>{btnText}</button>\n            </div>\n        </div>\n    );\n};\n\nexport default InteractiveStatusContainer;","import React, { useEffect, useReducer, useState } from \"react\";\nimport { useHistory, useLocation } from \"react-router\";\nimport Board from \"../../components/board\";\nimport CustomButton from \"../../components/custom-button\";\nimport HUD from \"../../components/hud\";\nimport InteractiveStatusContainer from \"../../components/interactive-status-container\";\nimport { NameContext } from \"../../context\";\nimport { GAMESTATE, NOTICE_BOARD_STATUS, MESSAGE_TYPE } from \"../../enums\";\nimport { network } from \"../../services/channels\";\nimport { GAME_NAME, PLAYER_ID } from \"../../services/login\";\nimport { connectToGameChannel } from \"../../services/network\";\n\nimport \"./style.css\";\n\ntype TGameChannelData = {\n\tgameChannelData: {\n\t\tmatch_id: string;\n\t\tplayers: any[];\n\t};\n\tplayerName: string;\n};\n\ntype TGameLocation = {\n\tstate: TGameChannelData;\n};\n\nconst Game = () => {\n\tconst history = useHistory();\n\tconst location: TGameLocation = useLocation();\n\n\tconst [playerBetValue, setPlayerBetValue] = useState(0);\n\tconst [noticeBoardStatus, setNoticeBoardStatus] = useState(\n\t\tNOTICE_BOARD_STATUS.BETTING\n\t);\n\tconst [messageType, setMessageType] = useState(MESSAGE_TYPE.PLACE_BET);\n\tconst [gameState, setGameState] = useState(GAMESTATE.BETTING);\n\tconst [playerBalanceValue, setPlayerBalanceValue] = useState(100);\n\tconst [canInputBet, setCanInputBet] = useState(true);\n\tconst [board, setBoard] = useState([0, 0, 0, 0, 0, 0, 0, 0, 0]);\n\n\tconst [opponentBetValue, setOpponentBetValue] = useState(0);\n\tconst [opponentBalanceValue, setOpponentBalanceValue] = useState(100);\n\tconst [opponentName, setOpponentName] = useState(\"\");\n\tconst [winPattern, setWinPattern] = useState([]);\n\n\tuseEffect(() => {\n\t\tif (location.state) {\n\t\t\tnetwork.gameChannel = connectToGameChannel(\n\t\t\t\tlocation.state.gameChannelData,\n\t\t\t\tlocation.state.playerName\n\t\t\t);\n\t\t\tnetwork.gameChannel.join().receive(\"ok\", (resp) => {\n\t\t\t\tconsole.log(\"Joined game channel\", resp);\n\t\t\t});\n\n\t\t\tnetwork.gameChannel.on(\"start_game_event\", (message) => {\n\t\t\t\tconsole.log(\"On start_game_event\", message);\n\t\t\t\tif (message.gamestate.player_1.id === PLAYER_ID) {\n\t\t\t\t\tsetOpponentName(message.gamestate.player_2.name);\n\t\t\t\t} else {\n\t\t\t\t\tsetOpponentName(message.gamestate.player_1.name);\n\t\t\t\t}\n\t\t\t\tsetBoard(message.gamestate.board);\n\t\t\t});\n\n\t\t\tnetwork.gameChannel.on(\"bet_res\", (message) => {\n\t\t\t\tconsole.log(\"bet_res\", message);\n\t\t\t\tif (message.p1.id === PLAYER_ID) {\n\t\t\t\t\tsetOpponentBalanceValue(message.p2.balance);\n\t\t\t\t\tsetOpponentBetValue(message.p2.bet);\n\t\t\t\t} else {\n\t\t\t\t\tsetOpponentBalanceValue(message.p1.balance);\n\t\t\t\t\tsetOpponentBetValue(message.p1.bet);\n\t\t\t\t}\n\n\t\t\t\tif (message.turn.id === \"continue\") {\n\t\t\t\t\tsetPlayerBetValue(0);\n\t\t\t\t\tsetGameState(GAMESTATE.BETTING);\n\t\t\t\t\tsetMessageType(MESSAGE_TYPE.EQUAL_BETS);\n\t\t\t\t\tsetNoticeBoardStatus(NOTICE_BOARD_STATUS.BETTING);\n\t\t\t\t} else {\n\t\t\t\t\tif (message.turn.id === PLAYER_ID) {\n\t\t\t\t\t\tsetGameState(GAMESTATE.MOVING);\n\t\t\t\t\t\tsetMessageType(MESSAGE_TYPE.YOUR_MOVE);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsetGameState(GAMESTATE.MOVE_WAITING);\n\t\t\t\t\t\tsetMessageType(MESSAGE_TYPE.OPPONENT_MOVE);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tnetwork.gameChannel.on(\"move_res\", (message) => {\n\t\t\t\tlet newBoard = message.board.map((val: any) =>\n\t\t\t\t\tval === PLAYER_ID ? \"X\" : val !== 0 ? \"O\" : 0\n\t\t\t\t);\n\t\t\t\tsetBoard(newBoard);\n\t\t\t\tsetPlayerBetValue(0);\n\t\t\t\tsetGameState(GAMESTATE.BETTING);\n\t\t\t\tsetNoticeBoardStatus(NOTICE_BOARD_STATUS.BETTING);\n\t\t\t\tsetMessageType(MESSAGE_TYPE.PLACE_BET);\n\t\t\t\tif (message.p1.id === PLAYER_ID) {\n\t\t\t\t} else {\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tnetwork.gameChannel.on(\"game_res\", (message) => {\n\t\t\t\tsetWinPattern(message.pattern);\n\t\t\t\tlet newBoard = message.board.map((val: any) =>\n\t\t\t\t\tval === PLAYER_ID ? \"X\" : val !== 0 ? \"O\" : 0\n\t\t\t\t);\n\t\t\t\tsetBoard(newBoard);\n\t\t\t\tsetNoticeBoardStatus(NOTICE_BOARD_STATUS.GAMEOVER);\n\t\t\t\tsetGameState(GAMESTATE.GAMEOVER);\n\t\t\t\tif (message.winner === PLAYER_ID) {\n\t\t\t\t\tsetMessageType(MESSAGE_TYPE.YOU_WON);\n\t\t\t\t} else {\n\t\t\t\t\tsetMessageType(MESSAGE_TYPE.YOU_LOST);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}, []);\n\n\tif (!location.state) {\n\t\thistory.push({\n\t\t\tpathname: \"/\",\n\t\t});\n\t\treturn <></>;\n\t}\n\n\tconst goHome = () => {\n\t\thistory.push({\n\t\t\tpathname: \"/\",\n\t\t});\n\t};\n\n\tconst handlePlaceBetValueInput = (\n\t\tevent: React.ChangeEvent<HTMLInputElement>\n\t) => {\n\t\tevent.preventDefault();\n\t\tlet val = Number(event.target.value);\n\t\tconsole.log(val);\n\t\tlet currentBalance = playerBalanceValue;\n\t\tif (val > currentBalance || val < 0) {\n\t\t\tsetCanInputBet(false);\n\t\t\treturn;\n\t\t}\n\t\tsetCanInputBet(true);\n\t\tsetPlayerBetValue(Number(val));\n\t};\n\n\tconst placeBet = () => {\n\t\tif (gameState !== GAMESTATE.BETTING) return;\n\t\tnetwork.gameChannel?.push(\"bet\", {\n\t\t\tbetdata: { playerId: PLAYER_ID, bet: playerBetValue },\n\t\t});\n\t\tsetPlayerBalanceValue(playerBalanceValue - playerBetValue);\n\t\tsetGameState(GAMESTATE.BET_WAITING);\n\t\tsetNoticeBoardStatus(NOTICE_BOARD_STATUS.NOTICE);\n\t\tsetMessageType(MESSAGE_TYPE.WAITING_FOR_OPPONENT_BET);\n\t};\n\n\treturn (\n\t\t<div className=\"game\">\n\t\t\t<div className=\"hud-container\">\n\t\t\t\t<HUD\n\t\t\t\t\tname={location.state.playerName}\n\t\t\t\t\tbet={playerBetValue}\n\t\t\t\t\tbalance={\n\t\t\t\t\t\tgameState === GAMESTATE.GAMEOVER\n\t\t\t\t\t\t\t? playerBalanceValue\n\t\t\t\t\t\t\t: playerBalanceValue - playerBetValue\n\t\t\t\t\t}\n\t\t\t\t\tgameState={gameState}\n\t\t\t\t\tstyle={{ backgroundColor: \"#FFD369\" }}\n\t\t\t\t/>\n\t\t\t\t<HUD\n\t\t\t\t\tname={opponentName}\n\t\t\t\t\tbet={\n\t\t\t\t\t\tgameState === GAMESTATE.BET_WAITING ||\n\t\t\t\t\t\tgameState === GAMESTATE.BETTING\n\t\t\t\t\t\t\t? \"...\"\n\t\t\t\t\t\t\t: opponentBetValue\n\t\t\t\t\t}\n\t\t\t\t\tbalance={opponentBalanceValue}\n\t\t\t\t\tgameState={gameState}\n\t\t\t\t\tstyle={{ backgroundColor: \"#FFD369\" }}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<InteractiveStatusContainer\n\t\t\t\tboardType={noticeBoardStatus}\n\t\t\t\tcanClick={canInputBet}\n\t\t\t\tmessage={messageType}\n\t\t\t\thandlePlaceBetValueInput={handlePlaceBetValueInput}\n\t\t\t\tplaceBet={gameState === GAMESTATE.GAMEOVER ? goHome : placeBet}\n\t\t\t/>\n\t\t\t<Board\n\t\t\t\tboard={board}\n\t\t\t\twinPattern={winPattern}\n\t\t\t\tcanMove={gameState === GAMESTATE.MOVING}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nexport default Game;\n","import React from \"react\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport Menu from \"./pages/menu\"\nimport Lobby from \"./pages/lobby\";\nimport Game from \"./pages/game\";\n\n\nconst Routes: React.FC = (props) => {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={Menu} ></Route>\n        <Route exact path=\"/lobby\" component={Lobby} ></Route>\n        <Route exact path=\"/game\" component={Game} ></Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default Routes;\n","import React, { useEffect } from 'react';\nimport Routes from \"./routes\";\n\nimport './App.css';\n\n// import { channel } from './services/network';\n\nconst App: React.FC = () =>  {\n\n  // useEffect(() => {\n  //   channel.join().receive(\"ok\", (msg) => {\n  //     console.log(\"DSB: msg\", msg);\n  //   });\n  // }, [])\n\n  return (\n    <div className=\"App\">\n      <Routes/>\n    </div>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}