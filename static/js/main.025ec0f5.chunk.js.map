{"version":3,"sources":["services/login.ts","services/network.ts","pages/menu/index.tsx","pages/lobby/index.tsx","components/square/index.tsx","components/board/index.tsx","components/bet-controller/index.tsx","components/player-hud/index.tsx","components/hud/index.tsx","pages/game/index.tsx","routes.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["PLAYER_ID","String","Math","floor","random","console","log","socket","Socket","params","playerId","connect","Menu","history","useHistory","useState","gameMode","setGameMode","roomName","setRoomName","playerCount","setPlayerCount","onSetGameMode","mode","handleRoomNameChange","e","target","value","handlePlayerCountChange","parseInt","max","onFormSubmit","preventDefault","gameData","matchmakerChannel","matchmakerChannelName","maxPlayer","gameName","matchData","matchId","channel","player_count","room_name","match_id","connectToMatchmakerChannel","join","receive","resp","on","message","gameChannelData","push","pathname","state","className","onClick","onSubmit","type","placeholder","onChange","Lobby","Square","props","Board","values","i","map","BetController","handleBetController","val","PlayerHud","balance","bet","HUD","balanceA","setBalanceA","balanceB","betA","setBetA","betB","newBalance","min","newBet","Game","matchmakerChannelMessage","connectToGameChannel","useLocation","Routes","exact","path","component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.025ec0f5.chunk.js","sourcesContent":["export const PLAYER_ID = String(Math.floor(Math.random() * 100000 ))\nexport const GAME_NAME = \"btt\"","import { Channel, Socket } from \"phoenix\";\nimport { GAME_NAME, PLAYER_ID } from \"./login\";\n\nexport type TMatchmakerChannelOptions = {\n    playerCount: number,\n    roomName: string,\n    matchId: string,\n    gameMode: string\n}\n\nexport type TMatchData = {\n    playerCount: number,\n    roomName: string,\n    gameMode: string\n}\n\nconsole.log(\"connecting to btt server ....\")\nconst socket: Socket = new Socket(\"ws://localhost:4000/socket\", {\n// const socket: Socket = new Socket(\"wss://still-plains-97814.herokuapp.com/socket\", {\n    params: { playerId: PLAYER_ID },\n});\nsocket.connect();\n\n// const channel: Channel = socket.channel(\"room:home\", {});\n\nconst connectToMatchmakerChannel = (gameData: TMatchData) => {\n    let matchmakerChannelName: string = \"\";\n    let maxPlayer = gameData.playerCount;\n    let matchId:string = \"\"\n    let gameName: string = GAME_NAME\n    switch (gameData.gameMode){\n        case \"default\":\n          if (gameData.roomName) {\n            matchmakerChannelName = `garuda_matchmaker:${gameData.roomName}:${gameName}:${maxPlayer}` ;\n            matchId = gameData.roomName;\n          } else {\n            matchmakerChannelName = `garuda_matchmaker:${gameName}:${maxPlayer}` ;\n            matchId = \"\";\n          }\n          break\n        case \"create\":\n          matchmakerChannelName = `garuda_matchmaker:${gameData.roomName}:${gameName}:createjoin` ;\n          matchId = gameData.roomName;\n          break\n        case \"join\":\n          matchmakerChannelName = `garuda_matchmaker:${gameData.roomName}:${gameName}:createjoin` ;\n          matchId = gameData.roomName;\n          maxPlayer = -1\n          break\n        default:\n          break\n  \n      }\n    let matchData: TMatchmakerChannelOptions = {\n        roomName: matchmakerChannelName, \n        playerCount: maxPlayer,\n        matchId: gameData.roomName,\n        gameMode: gameData.gameMode\n    }\n\n    let channel = socket.channel(matchmakerChannelName, {\n        player_count: matchData.playerCount,\n        room_name: matchData.roomName,\n        match_id: matchData.matchId,\n        mode: matchData.gameMode\n    });\n    return channel\n}\n\nconst connectToGameChannel = (matchmakerChannelMessage: any) => {\n    let matchId = matchmakerChannelMessage[\"match_id\"];\n    let gameName = GAME_NAME\n    let gameChannel = socket.channel(`room:${gameName}:${matchId}`);\n    return gameChannel\n}\n\nexport { socket, connectToMatchmakerChannel, connectToGameChannel } ","import { Channel } from 'phoenix';\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { PLAYER_ID } from '../../services/login';\nimport { connectToGameChannel, connectToMatchmakerChannel, TMatchData } from '../../services/network';\n\nimport \"./menu.css\"\n\nconst Menu = () => {\n    const history = useHistory();\n    const [gameMode, setGameMode] = useState(\"\")\n    const [roomName, setRoomName] = useState(\"\")\n    const [playerCount, setPlayerCount] = useState(2)\n\n    const goToGame = ( gameChannelData: any) => {\n\t\thistory.push({\n\t\t\tpathname: \"/game\",\n\t\t\tstate: {gameChannelData},\n\t\t});\n\t};\n\n    const onSetGameMode = (mode: string) => {\n        setRoomName(\"\")\n        setPlayerCount(2)\n        setGameMode(mode)\n    }\n\n    const handleRoomNameChange:((event: React.ChangeEvent<HTMLInputElement>) => void) = (e) => {\n        setRoomName(e.target.value)\n    }\n    \n    const handlePlayerCountChange:((event: React.ChangeEvent<HTMLInputElement>) => void) = (e) => {\n        let playerCount = parseInt(e.target.value) || 2\n        setPlayerCount(Math.max(2,playerCount))\n    }\n    \n    const onFormSubmit: ((event: React.FormEvent<HTMLFormElement>) => void) = (e) => {\n        e.preventDefault()\n\n        let gameData: TMatchData = {\n            roomName, \n            playerCount,\n            gameMode\n        }\n\n        let matchmakerChannel = connectToMatchmakerChannel(gameData)\n        matchmakerChannel.join()\n        .receive(\"ok\", resp => {console.log(\"Joined matchmaker\", resp); return \"ok\"})\n\n        matchmakerChannel.on(\"match_maker_event\", (message) => {\n            console.log(\"On match maker event\", message);\n            goToGame(message)\n\n            // gameChannel = connectToGameChannel(message)\n            // gameChannel.join()\n            // .receive(\"ok\", resp => {console.log(\"Joined matchmaker\", resp)})\n        });\n        console.log(gameData)\n    }\n\n    return (\n        <div className=\"menu\" >\n            <div className=\"title\">\n                Menu\n            </div>\n            <div className=\"player-id\">\n                PLAYER ID: {PLAYER_ID}\n            </div>\n            <div className=\"button-container\">\n                <button className=\"btn-mode\" onClick={() => onSetGameMode(\"create\")}>CREATE ROOM</button>\n                <button className=\"btn-mode\" onClick={() => onSetGameMode(\"join\")}>JOIN ROOM</button>\n                <button className=\"btn-mode\" onClick={() => onSetGameMode(\"default\")}>RANDOM</button>\n            </div>\n            <div className=\"mode-input-container\">\n                {\n                    gameMode===\"create\" && \n                    <form onSubmit={onFormSubmit}>\n                        <label>\n                        Room name:\n                        <input type=\"text\" placeholder=\"Enter room name\" value={roomName} onChange={handleRoomNameChange} />\n                        </label>\n                        <label>\n                        Player count:\n                        <input type=\"text\" placeholder=\"Enter number\" value={playerCount} onChange={handlePlayerCountChange} />\n                        </label>\n                        <input type=\"submit\" value=\"Submit\" />\n                    </form>\n                }\n                {\n                    gameMode===\"join\" && \n                    <form onSubmit={onFormSubmit}>\n                        <label>\n                        Room name:\n                        <input type=\"text\" placeholder=\"Enter room name\" value={roomName} onChange={handleRoomNameChange} />\n                        </label>\n                        <input type=\"submit\" value=\"Submit\" />\n                    </form>\n                }\n                {\n                    gameMode===\"default\" && \n                    <form onSubmit={onFormSubmit}>\n                        <label>\n                        Room name:\n                        <input type=\"text\" placeholder=\"Optional\" value={roomName} onChange={handleRoomNameChange} />\n                        </label>\n                        <label>\n                        Player count:\n                        <input type=\"text\" placeholder=\"Enter number\" value={playerCount} onChange={handlePlayerCountChange} />\n                        </label>\n                        <input type=\"submit\" value=\"Submit\" />\n                    </form>\n                }\n            </div>\n        </div>\n    );\n};\n\nexport default Menu;","import React from 'react';\n\nconst Lobby = () => {\n    return (\n        <div>\n            Lobby\n        </div>\n    );\n};\n\nexport default Lobby;","import React from 'react';\nimport \"./square.css\"\n\ntype TSquare = {\n    value: number\n}\n\nconst Square = (props: TSquare) => {\n    const {value} = props\n    return (\n        <button className=\"square\">\n\t\t    {value}\n        </button>\n    );\n};\n\nexport default Square;","import React from 'react';\nimport Square from '../square';\nimport \"./board.css\"\n\nconst Board = () => {\n    let values = []\n    for(let i=1; i <= 9; i++){\n        values.push(i)\n    }    \n    return (\n        <div className=\"board\">\n            {values.map(value => <Square value={value} key={value}/>)}\n        </div>\n    );\n};\n\nexport default Board;","import React from 'react';\nimport \"./bet-controller.css\"\n\ntype TBetController = {\n    onClick: (val:number)=> void\n}\n\nconst BetController = (props: TBetController) => {\n    \n    const handleBetController = (val:number) => {\n        props.onClick(val)\n    }\n    \n    return (\n        <div className=\"bet-controller\">\n            <div className=\"up\" onClick={()=>handleBetController(1)}>U</div>\n            <div className=\"down\" onClick={()=>handleBetController(-1)}>D</div>\n        </div>\n    );\n};\n\nexport default BetController;","import React from 'react';\n\nimport \"./player-hud.css\"\n\ntype TPlayerHud = {\n    balance: number,\n    bet: number\n}\nconst PlayerHud = (props: TPlayerHud) => {\n    return (\n        <div className=\"player-hud\">\n            <div className=\"balance\">{props.balance}</div>\n            <div className=\"bet\">{props.bet}</div>\n        </div>\n    );\n};\n\nexport default PlayerHud;","import React, { useState } from 'react';\nimport BetController from '../bet-controller';\nimport PlayerHud from '../player-hud';\nimport \"./hud.css\"\n\nconst HUD = () => {\n    const [balanceA, setBalanceA] = useState(100)\n    const [balanceB, setBalanceB] = useState(100)\n    const [betA, setBetA] = useState(0)\n    const [betB, setBetB] = useState(0)\n\n    const handleBetController = (val:number) => {\n        let newBalance = Math.max(0,Math.min(100,balanceA-val))\n        let newBet = Math.max(0,Math.min(100,betA+val))\n        setBalanceA(newBalance)\n        setBetA(newBet)\n    }\n\n    return (\n        <div className=\"hud\">\n            <PlayerHud balance={balanceA} bet={betA}/>\n            <BetController onClick={(val:number) => handleBetController(val)}/>\n            <PlayerHud balance={balanceB} bet={betB}/>\n        </div>\n    );\n};\n\nexport default HUD;","import React from 'react';\nimport { useHistory, useLocation } from 'react-router';\nimport Board from '../../components/board';\nimport HUD from '../../components/hud';\nimport { connectToGameChannel } from '../../services/network';\n\nimport \"./game.css\"\n\ntype TGameChannelData = {\n        gameChannelData: {\n        match_id: string,\n        players: any[]\n    }\n}\n\ntype TGameLocation = {\n    state: TGameChannelData\n}\n\nconst Game = () => {\n\n    const history = useHistory()\n    const location: TGameLocation = useLocation();\n\n    let gameChannel = connectToGameChannel(location.state.gameChannelData)\n    gameChannel.join()\n    .receive(\"ok\", resp => {console.log(\"Joined matchmaker\", resp)})\n\n    return (\n        <div className=\"game\">\n            <HUD/>\n            <div className=\"bet-confirm\">\n                <button className=\"btn-bet-confirm\">CONFIRM</button>\n            </div>\n            <Board/>\n        </div>\n    );\n};\n\nexport default Game;","import React from \"react\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport Menu from \"./pages/menu\"\nimport Lobby from \"./pages/lobby\";\nimport Game from \"./pages/game\";\n\n\nconst Routes: React.FC = (props) => {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={Menu} ></Route>\n        <Route exact path=\"/lobby\" component={Lobby} ></Route>\n        <Route exact path=\"/game\" component={Game} ></Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default Routes;\n","import React, { useEffect } from 'react';\nimport Routes from \"./routes\";\n\nimport './App.css';\n\n// import { channel } from './services/network';\n\nconst App: React.FC = () =>  {\n\n  // useEffect(() => {\n  //   channel.join().receive(\"ok\", (msg) => {\n  //     console.log(\"DSB: msg\", msg);\n  //   });\n  // }, [])\n\n  return (\n    <div className=\"App\">\n      <Routes/>\n    </div>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}