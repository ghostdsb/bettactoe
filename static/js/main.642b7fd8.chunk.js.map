{"version":3,"sources":["components/input-playername/index.tsx","components/logo/index.tsx","components/custom-button/index.tsx","components/menu-button/index.tsx","components/menu-button-container/index.tsx","services/login.ts","services/network.ts","pages/menu/index.tsx","pages/lobby/index.tsx","services/channels.ts","components/square/index.tsx","components/board/index.tsx","context.tsx","components/bet-controller/index.tsx","components/player-hud/index.tsx","components/hud/index.tsx","components/result/index.tsx","pages/game/index.tsx","routes.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["InputPlayername","props","className","type","id","name","value","onChange","handleChange","Logo","style","backgroundColor","color","foregroundColor","CustomButton","onClick","text","MenuButton","width","animate","shouldResetWidth","placeholder","roomName","handleOnChange","required","MenuButtonContainer","useState","index","toggleIndex","setGameMode","idx","mode","console","log","handleModeChange","onSubmit","confirm","PLAYER_ID","String","Math","floor","random","socket","Socket","params","playerId","connect","Menu","history","useHistory","gameMode","setRoomName","playerCount","setPlayerCount","setName","searching","setSearching","useLoading","loading","indicator","indicatorEl","containerProps","e","target","gameData","matchmakerChannel","matchmakerChannelName","maxPlayer","gameName","matchData","matchId","channel","player_count","room_name","match_id","connectToMatchmakerChannel","join","receive","resp","on","message","gameChannelData","leave","push","pathname","state","playerName","preventDefault","Lobby","network","Square","canMove","gameChannel","movedata","pos","Board","board","values","i","map","NameContext","React","createContext","opponentName","BetController","handleBetController","val","canBet","opacity","PlayerHud","lid","balance","bet","HUD","isOpponentVisible","setBetAmount","opponentData","playerData","betController","playerNames","useContext","Result","resultMessage","winner","Game","location","useLocation","setOpponentName","isGameReady","setGameReady","setBetStatus","setMoveStatus","setOpponentHUDVisibility","betAmount","setOpponentData","setPlayerData","setBoard","isGameOver","setGameOver","setWinner","useEffect","matchmakerChannelMessage","connectToGameChannel","gamestate","player_1","player_2","p1","p2","turn","newBoard","Provider","newBalance","max","min","newBet","betdata","Routes","exact","path","component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.642b7fd8.chunk.js","sourcesContent":["import React, { ChangeEvent } from 'react';\nimport \"./style.css\"\n\ntype TInputPlayername = {\n    value: string,\n    handleChange: (event: ChangeEvent<HTMLInputElement>) => void\n}\n\nconst InputPlayername:React.FC<TInputPlayername> = (props) => {\n    return (\n        <div className=\"input-playername\">\n            {<input className=\"pname-input-field\" type=\"text\" id=\"fname\" name=\"fname\" value={props.value} onChange={props.handleChange}/>}\n        </div>\n    );\n};\n\nexport default InputPlayername;","import React from 'react';\nimport \"./style.css\"\n\ntype TLogo = {\n    backgroundColor: string,\n    foregroundColor: string\n}\n\nconst Logo:React.FC<TLogo> = (props) => {\n    return (\n        <div className=\"logo\">\n            <div className=\"background\" style={{backgroundColor: props.backgroundColor}}>\n                <div className=\"foreground\"  style={{color: props.foregroundColor}}>\n                    <div className=\"logo-square top left\">B</div>\n                    <div className=\"logo-square top c\">E</div>\n                    <div className=\"logo-square top right\">T</div>\n\n                    <div className=\"logo-square m left\">T</div>\n                    <div className=\"logo-square m c\">A</div>\n                    <div className=\"logo-square m right\">C</div>\n\n                    <div className=\"logo-square bottom left\">T</div>\n                    <div className=\"logo-square bottom c\">O</div>\n                    <div className=\"logo-square bottom right\">E</div>\n                </div>\n\n            </div>\n\n        </div>\n    );\n};\n\nexport default Logo;","import React, { FormEvent } from \"react\";\nimport \"./style.css\";\n\ntype TCustomButton = {\n    text: string;\n    onClick: () => void;\n};\n\nconst CustomButton: React.FC<TCustomButton> = (props) => {\n    return (\n        <div className=\"custom-button\">\n            <button className=\"btn\" onClick={props.onClick}>\n                {props.text}{\" \"}\n            </button>\n        </div>\n    );\n};\n\nexport default CustomButton;\n","import React, { useState } from \"react\";\nimport CustomButton from \"../custom-button\";\nimport \"./style.css\";\n\ntype TMenuButton = {\n\ttext: string;\n\tonClick: () => void;\n    animate?: boolean;\n    confirm?:boolean\n\tshouldResetWidth: boolean;\n\thandleOnChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n\troomName: string;\n};\n\nconst MenuButton: React.FC<TMenuButton> = (props) => {\n\tconst placeholderText: string = \"Enter room name\";\n\n\treturn (\n\t\t<div className=\"menu-button\">\n\t\t\t<div\n\t\t\t\tclassName=\"input-component\"\n\t\t\t\tstyle={{\n\t\t\t\t\twidth: !props.animate\n\t\t\t\t\t\t? \"0%\"\n\t\t\t\t\t\t: props.shouldResetWidth\n\t\t\t\t\t\t? \"0%\"\n\t\t\t\t\t\t: \"67%\",\n                }}\n                \n\t\t\t>\n\t\t\t\t<input\n\t\t\t\t\tclassName=\"rname-input-field\"\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tid={props.text}\n\t\t\t\t\tplaceholder={placeholderText}\n\t\t\t\t\tvalue={props.roomName}\n                    onChange={props.handleOnChange}\n                    required\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div\n\t\t\t\tclassName=\"btn-component\"\n\t\t\t\tstyle={{\n\t\t\t\t\twidth: !props.animate\n\t\t\t\t\t\t? \"100%\"\n\t\t\t\t\t\t: props.shouldResetWidth\n\t\t\t\t\t\t? \"100%\"\n\t\t\t\t\t\t: \"30%\",\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<CustomButton\n\t\t\t\t\ttext={\n\t\t\t\t\t\t!props.animate\n\t\t\t\t\t\t\t?  props.shouldResetWidth? props.text:\"CONFIRM ?\"\n\t\t\t\t\t\t\t: props.shouldResetWidth\n\t\t\t\t\t\t\t? props.text\n\t\t\t\t\t\t\t: \"GO\"\n\t\t\t\t\t}\n\n                    onClick={ props.shouldResetWidth\n\t\t\t\t\t\t\t? () => {}\n\t\t\t\t\t\t\t: props.onClick\n\t\t\t\t\t}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default MenuButton;\n","import React, { useState } from \"react\";\nimport MenuButton from \"../menu-button\";\nimport \"./style.css\";\n\ntype TMenuButtonContainer = {\n\tonSubmit: () => void;\n\thandleOnChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n\troomName: string;\n\thandleModeChange: (gameMode: string) => void;\n};\n\nconst MenuButtonContainer: React.FC<TMenuButtonContainer> = (props) => {\n    const [index, toggleIndex] = useState(0);\n    \n\tconst setGameMode = (idx: number, mode: string) => {\n    console.log(\"DSB ~ file: index.tsx ~ line 16 ~ setGameMode ~ mode\", mode);\n\t\tprops.handleModeChange(mode);\n\t\ttoggleIndex(idx);\n\t};\n\n\treturn (\n\t\t<div className=\"menu-button-container\">\n\t\t\t<div style={{ width: \"262px\" }}>\n\t\t\t\t<div onClick={() => setGameMode(1, \"create\")}>\n\t\t\t\t\t<MenuButton\n\t\t\t\t\t\tonClick={props.onSubmit}\n\t\t\t\t\t\ttext={\"CREATE ROOM\"}\n\t\t\t\t\t\tanimate\n\t\t\t\t\t\tshouldResetWidth={index !== 1}\n\t\t\t\t\t\thandleOnChange={props.handleOnChange}\n\t\t\t\t\t\troomName={props.roomName}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div onClick={() => setGameMode(2, \"join\")}>\n\t\t\t\t\t<MenuButton\n\t\t\t\t\t\tonClick={props.onSubmit}\n\t\t\t\t\t\ttext={\"JOIN ROOM\"}\n\t\t\t\t\t\tanimate\n\t\t\t\t\t\tshouldResetWidth={index !== 2}\n\t\t\t\t\t\thandleOnChange={props.handleOnChange}\n\t\t\t\t\t\troomName={props.roomName}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div onClick={() => setGameMode(3, \"default\")}>\n\t\t\t\t\t<MenuButton\n\t\t\t\t\t\tonClick={props.onSubmit}\n\t\t\t\t\t\ttext={\"RANDOM\"}\n\t\t\t\t\t\tshouldResetWidth={index !== 3}\n\t\t\t\t\t\thandleOnChange={props.handleOnChange}\n                        roomName={props.roomName}\n                        confirm\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default MenuButtonContainer;\n","export const PLAYER_ID = String(Math.floor(Math.random() * 100000 ))\nexport const GAME_NAME = \"btt\"","import { Socket } from \"phoenix\";\nimport { GAME_NAME, PLAYER_ID } from \"./login\";\n\nexport type TMatchmakerChannelOptions = {\n\tplayerCount: number;\n\troomName: string;\n\tmatchId: string;\n\tgameMode: string;\n};\n\nexport type TMatchData = {\n\tplayerCount: number;\n\troomName: string;\n\tgameMode: string;\n};\n\nconsole.log(\"connecting to btt server ....\");\n// const socket: Socket = new Socket(\"ws://localhost:4000/socket\", {\n\tconst socket: Socket = new Socket(\"wss://still-plains-97814.herokuapp.com/socket\", {\n\tparams: { playerId: PLAYER_ID },\n});\nsocket.connect();\n\n// const channel: Channel = socket.channel(\"room:home\", {});\n\nconst connectToMatchmakerChannel = (gameData: TMatchData) => {\n\tconsole.log(\n\t\t\"DSB ~ file: network.ts ~ line 27 ~ connectToMatchmakerChannel ~ gameData\",\n\t\tgameData\n\t);\n\tlet matchmakerChannelName: string = \"\";\n\tlet maxPlayer = gameData.playerCount;\n\tlet matchId: string = \"\";\n\tlet gameName: string = GAME_NAME;\n\tswitch (gameData.gameMode) {\n\t\tcase \"default\":\n\t\t\tif (gameData.roomName) {\n\t\t\t\tmatchmakerChannelName = `garuda_matchmaker:${gameData.roomName}:${gameName}:${maxPlayer}`;\n\t\t\t\tmatchId = gameData.roomName;\n\t\t\t} else {\n\t\t\t\tmatchmakerChannelName = `garuda_matchmaker:${gameName}:${maxPlayer}`;\n\t\t\t\tmatchId = \"\";\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"create\":\n\t\t\tmatchmakerChannelName = `garuda_matchmaker:${gameData.roomName}:${gameName}:createjoin`;\n\t\t\tmatchId = gameData.roomName;\n\t\t\tbreak;\n\t\tcase \"join\":\n\t\t\tmatchmakerChannelName = `garuda_matchmaker:${gameData.roomName}:${gameName}:createjoin`;\n\t\t\tmatchId = gameData.roomName;\n\t\t\tmaxPlayer = -1;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t}\n\tlet matchData: TMatchmakerChannelOptions = {\n\t\troomName: matchmakerChannelName,\n\t\tplayerCount: maxPlayer,\n\t\tmatchId: gameData.roomName,\n\t\tgameMode: gameData.gameMode,\n\t};\n\n\tlet channel = socket.channel(matchmakerChannelName, {\n\t\tplayer_count: matchData.playerCount,\n\t\troom_name: matchData.roomName,\n\t\tmatch_id: matchData.matchId,\n\t\tmode: matchData.gameMode,\n\t});\n\treturn channel;\n};\n\nconst connectToGameChannel = (matchmakerChannelMessage: any, name: string) => {\n\tconsole.log(\n\t\t\"DSB ~ file: network.ts ~ line 71 ~ connectToGameChannel ~ matchmakerChannelMessage\",\n\t\tmatchmakerChannelMessage\n\t);\n\tlet matchId = matchmakerChannelMessage[\"match_id\"];\n\tlet gameName = GAME_NAME;\n\tlet gameChannel = socket.channel(`${gameName}:${matchId}`, { name });\n\treturn gameChannel;\n};\n\nexport { socket, connectToMatchmakerChannel, connectToGameChannel };\n","import { Channel } from \"phoenix\";\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useLoading, Grid } from '@agney/react-loading';\n\nimport CustomButton from \"../../components/custom-button\";\nimport InputPlayername from \"../../components/input-playername\";\nimport Logo from \"../../components/logo\";\nimport MenuButton from \"../../components/menu-button\";\nimport MenuButtonContainer from \"../../components/menu-button-container\";\nimport { PLAYER_ID } from \"../../services/login\";\nimport {\n\tconnectToGameChannel,\n\tconnectToMatchmakerChannel,\n\tTMatchData,\n} from \"../../services/network\";\n\nimport \"./style.css\";\n\nconst Menu = () => {\n\tconst history = useHistory();\n\tconst [gameMode, setGameMode] = useState(\"\");\n\tconst [roomName, setRoomName] = useState(\"\");\n\tconst [playerCount, setPlayerCount] = useState(2);\n    const [name, setName] = useState(String(PLAYER_ID));\n    \n    const [searching, setSearching] = useState(false)\n\n    const { containerProps, indicatorEl } = useLoading({\n        loading: true,\n        //@ts-ignore\n        indicator: <Grid width=\"50\"/>,\n      });\n\n\tconst goToGame = (gameChannelData: any) => {\n\t\thistory.push({\n\t\t\tpathname: \"/game\",\n\t\t\tstate: { gameChannelData, playerName: name },\n\t\t});\n\t};\n\n\tconst onSetGameMode = (mode?: string) => {\n\t\tsetRoomName(\"\");\n\t\tsetPlayerCount(2);\n\t\tconsole.log(\"GAME MODE \", mode ? mode : \"default\");\n\t\tsetGameMode(mode ? mode : \"default\");\n\t};\n\n\tconst handleRoomNameChange: (\n\t\tevent: React.ChangeEvent<HTMLInputElement>\n\t) => void = (e) => {\n\t\te.preventDefault();\n\n\t\tsetRoomName(e.target.value);\n\t};\n\n\tconst handlePlayerNameChange: (\n\t\tevent: React.ChangeEvent<HTMLInputElement>\n\t) => void = (e) => {\n\t\tconsole.log(e.target.value);\n\t\tsetName(e.target.value);\n\t};\n\n\tconst requestStartGame = () => {\n\n            \n        let gameData: TMatchData = {\n            roomName,\n            playerCount,\n            gameMode: gameMode||\"default\",\n        };\n        \n        if(gameData.gameMode !== \"default\" && !roomName){\n            return\n        }\n        \n        setSearching(true)\n\n\t\tlet matchmakerChannel = connectToMatchmakerChannel(gameData);\n\t\tmatchmakerChannel.join().receive(\"ok\", (resp) => {\n\t\t\tconsole.log(\"Joined matchmaker\", resp);\n\t\t\treturn \"ok\";\n\t\t});\n\n\t\tmatchmakerChannel.on(\"match_maker_event\", (message) => {\n\t\t\tconsole.log(\"On match maker event\", message);\n\t\t\tmatchmakerChannel.leave();\n\t\t\tgoToGame(message);\n\n\t\t});\n\t};\n\n\treturn (\n\t\t<div className=\"menu\">\n\t\t\t<Logo backgroundColor={\"#ffd369\"} foregroundColor={\"#393e46\"} />\n\n\t\t\t<InputPlayername\n\t\t\t\tvalue={name}\n\t\t\t\thandleChange={handlePlayerNameChange}\n\t\t\t/>\n            {\n                searching?\n                <div className=\"searching\">\n                    <div>\n                        {indicatorEl}\n                    </div>\n                    {/* SEARCHING... */}\n                </div>:\n                <MenuButtonContainer\n                    onSubmit={requestStartGame}\n                    // onSubmit={()=>{}}\n                    handleModeChange={onSetGameMode}\n                    roomName={roomName}\n                    handleOnChange={handleRoomNameChange}\n                />\n            }\n\t\t</div>\n\t);\n};\n\nexport default Menu;\n","import React from 'react';\n\nconst Lobby = () => {\n    return (\n        <div>\n            Lobby\n        </div>\n    );\n};\n\nexport default Lobby;","import { Channel } from \"phoenix\";\ninterface INetworkObject {\n    gameChannel?: Channel,\n}\n\nconst network: INetworkObject = {}\n\nexport { network }","import React from 'react';\nimport { preProcessFile } from 'typescript';\nimport { network } from '../../services/channels';\nimport { PLAYER_ID } from '../../services/login';\nimport \"./style.css\"\n\ntype TSquare = {\n    value: string,\n    pos: number,\n    canMove: boolean,\n}\n\nconst Square = (props: TSquare) => {\n    const {value} = props\n\n    const sendMove = () => {\n        if(!props.canMove) return\n        network.gameChannel?.push(\"move\",{movedata: { pos: props.pos}})\n    }\n    return (\n        <button className=\"square\" onClick={sendMove}>\n\t\t    {value === \"0\" && \"\"}\n\t\t    {value === PLAYER_ID && \"X\"}\n\t\t    {value !== PLAYER_ID && value !== \"0\"  && \"O\"}\n\n        </button>\n    );\n};\n\nexport default Square;","import React from 'react';\nimport Square from '../square';\nimport \"./style.css\"\n\ntype TBoard = {\n    canMove: boolean,\n    board: string[],\n}\n\n\nconst Board:React.FC<TBoard> = ({canMove, board}) => {\n    let values = []\n    for(let i=1; i <= 9; i++){\n        values.push(i)\n    }    \n    return (\n        <div className=\"board\">\n            {values.map(value => \n                <Square value={board[value-1]} key={value} pos={value} canMove={canMove}/>\n            )}\n        </div>\n    );\n};\n\nexport default Board;","import React from \"react\"\n\nexport const NameContext = React.createContext({\n    playerName: \"\",\n    opponentName: \"\"\n})","import React from 'react';\nimport \"./style.css\"\n\ntype TBetController = {\n    onClick: (val:number)=> void,\n    canBet: boolean\n}\n\nconst BetController = (props: TBetController) => {\n    \n    const handleBetController = (val:number) => {\n        if(!props.canBet) return\n        props.onClick(val)\n    }\n    \n    return (\n        <div className=\"bet-controller\" style={{opacity: props.canBet?1:0}}>\n            <div className=\"up\" onClick={()=>handleBetController(1)}>U</div>\n            <div className=\"down\" onClick={()=>handleBetController(-1)}>D</div>\n        </div>\n    );\n};\n\nexport default BetController;","import React from 'react';\n\nimport \"./style.css\"\n\ntype TPlayerHud = {\n    balance: number,\n    bet: number,\n    lid?: boolean,\n    name: string\n}\nconst PlayerHud = (props: TPlayerHud) => {\n    return (\n        <div className=\"player-hud\">\n            <div className=\"name\">{props.name}</div>\n            {\n                props.lid ? \n                <div className=\"waiting-lig\">WAITING</div>:\n                <>\n\n                <div className=\"balance\">{props.balance}</div>\n                <div className=\"bet\">{props.bet}</div>\n                </>\n            }\n        </div>\n    );\n};\n\nexport default PlayerHud;","import React, { useContext, useState } from 'react';\nimport { NameContext } from '../../context';\nimport BetController from '../bet-controller';\nimport PlayerHud from '../player-hud';\nimport \"./style.css\"\n\ntype THud = {\n    canBet: boolean,\n    setBetAmount: (amount: number)=> void,\n    isOpponentVisible: boolean,\n    opponentData: {bet: number, balance: number},\n    playerData: {bet: number, balance: number},\n    betController: (val: number) => void\n}\n\nconst HUD:React.FC<THud> = ({canBet, setBetAmount, isOpponentVisible, opponentData, playerData, betController}) => {\n    const playerNames = useContext(NameContext)\n    return (\n        <div className=\"hud\">\n            <PlayerHud balance={playerData.balance} bet={playerData.bet} name={playerNames.playerName}/>\n            <BetController canBet={canBet} onClick={(val:number) => betController(val) }/>\n            <PlayerHud balance={opponentData.balance} bet={opponentData.bet} lid={!isOpponentVisible} name={playerNames.opponentName}/>\n        </div>\n    );\n};\n\nexport default HUD;","import React from 'react';\nimport { PLAYER_ID } from '../../services/login';\nimport \"./style.css\"\n\ntype TResult = {\n    winner: string\n}\n\nconst Result:React.FC<TResult> = ({winner}) => {\n    let resultMessage = \"\"\n    let resultStatus = \"\"\n    if(winner === PLAYER_ID){\n        resultStatus = \"won\"\n        resultMessage = \"CONGRATULATIONS! YOU WON\"\n    }else{\n        resultStatus = \"lost\"\n        resultMessage = \"BETTER LUCK NEXT TIME!\"\n    }\n    return (\n        <div className=\"result-comp\">\n            {resultMessage}\n        </div>\n    );\n};\n\nexport default Result;","import React, { useEffect, useReducer, useState } from 'react';\nimport { useHistory, useLocation } from 'react-router';\nimport Board from '../../components/board';\nimport HUD from '../../components/hud';\nimport Result from '../../components/result';\nimport { NameContext } from '../../context';\nimport { network } from '../../services/channels';\nimport { PLAYER_ID } from '../../services/login';\nimport { connectToGameChannel } from '../../services/network';\n\nimport \"./style.css\"\n\ntype TGameChannelData = {\n        \n        gameChannelData: {\n        match_id: string,\n        players: any[]\n            \n        },\n        playerName: string\n}\n\ntype TGameLocation = {\n    state: TGameChannelData\n}\n\nconst Game = () => {\n\n    const history = useHistory()\n    const location: TGameLocation = useLocation();\n\n    console.log(\"DSB ~ file: index.tsx ~ line 32 ~ Game ~ location\", location);\n    if (!location.state) {\n        history.push({\n            pathname: \"/\",\n        });\n        // return <div></div>;\n    }\n\n    const [opponentName, setOpponentName] = useState(\"OPPONENT\")\n\n    const [isGameReady, setGameReady] = useState(false)\n    const [canBet, setBetStatus] = useState(true)\n    const [canMove, setMoveStatus] = useState(false)\n    const [isOpponentVisible, setOpponentHUDVisibility] = useState(false)\n    \n    const [betAmount, setBetAmount] = useState(0)\n    \n    const [opponentData, setOpponentData] = useState({bet: 0, balance: 100})\n    const [playerData, setPlayerData] = useState({bet: 0, balance: 100})\n    \n    const [board, setBoard] = useState([\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"])\n    const [isGameOver, setGameOver] = useState(false)\n    const [winner, setWinner] = useState(\"\")\n    \n    useEffect(() => {\n        if(location.state){\n            \n            network.gameChannel = connectToGameChannel(location.state.gameChannelData, location.state.playerName)\n            network.gameChannel.join()\n            .receive(\"ok\", resp => {console.log(\"Joined game channel\", resp)})\n        \n            network.gameChannel.on(\"start_game_event\", (message) => {\n                console.log(\"On start_game_event\", message);\n                if(message.gamestate.player_1.id === PLAYER_ID){\n                    setOpponentName(message.gamestate.player_2.name)\n                }else{\n                    setOpponentName(message.gamestate.player_1.name)\n                }\n                setGameReady(true)\n            });\n        \n            network.gameChannel.on(\"bet_res\", (message) => {\n                console.log(\"bet_res\", message);\n                if(message.p1.id === PLAYER_ID){\n                    setOpponentData({bet: message.p2.bet, balance: message.p2.balance})\n                    setPlayerData({bet: message.p1.bet, balance: message.p1.balance})\n                }else{\n                    setOpponentData({bet: message.p1.bet, balance: message.p1.balance})\n                    setPlayerData({bet: message.p2.bet, balance: message.p2.balance})\n                }\n    \n                console.log(\"DSB ~ file: index.tsx ~ line 60 ~ network.gameChannel.on ~ message.turn\", message.turn);\n                console.log(\"DSB ~ file: index.tsx ~ line 61 ~ network.gameChannel.on ~ PLAYER_ID\", PLAYER_ID);\n                if(message.turn.id === PLAYER_ID) {\n                    setMoveStatus(true)\n                    console.log(\"YOU CAN MOVE\")\n                }else{\n                    setMoveStatus(false)\n                    console.log(\"YOU CAN NOT MOVE\")\n                }\n                \n                setOpponentHUDVisibility(true)\n                setBetStatus(false)\n    \n            });\n    \n            network.gameChannel.on(\"move_res\", (message) => {\n                console.log(\"move_res\", message);\n                let newBoard = (message.board).map((val: any) => String(val))\n                if(message.p1.id === PLAYER_ID){\n                    setOpponentData({bet: message.p2.bet, balance: message.p2.balance})\n                    setPlayerData({bet: 0, balance: message.p1.balance})\n                }else{\n                    setOpponentData({bet: message.p1.bet, balance: message.p1.balance})\n                    setPlayerData({bet: 0, balance: message.p2.balance})\n                }\n                setBoard(newBoard)\n                setBetStatus(true)\n                setMoveStatus(false)\n                setOpponentHUDVisibility(false)\n            });\n    \n            network.gameChannel.on(\"game_res\", (message) => {\n                console.log(\"game_res\", message);\n                setWinner(message.winner)\n                let newBoard = (message.board).map((val: any) => String(val))\n                setBoard(newBoard)\n                setBetStatus(false)\n                setMoveStatus(false)\n                setGameOver(true)\n            });\n        }\n        \n    },[])\n\n    const goHome = () =>{\n        history.push({\n            pathname: \"/\",\n        });\n    }\n\n    const placeBet = () => {\n        if(!canBet) return\n        console.log(betAmount)\n        setBetStatus(false)\n        setMoveStatus(false)\n        network.gameChannel?.push(\"bet\",{betdata: {playerId: PLAYER_ID, bet: betAmount}})\n    }\n\n    const handleBetController = (val:number) => {\n        let newBalance = Math.max(0,Math.min(playerData.balance,playerData.balance-val))\n        let newBet = Math.max(0,Math.min(playerData.balance,playerData.bet+val))\n        // setBalanceA(newBalance)\n        // setBetA(newBet)\n        setPlayerData({bet: newBet, balance: newBalance})\n        setBetAmount(newBet)\n    }\n\n    return (\n        <div className=\"game\">\n            {\n                !isGameReady && \n                <div className=\"waiting\">\n                    WAITING...\n                </div>\n            }\n            {\n                isGameReady && \n                <div className=\"start-game\">\n                    <NameContext.Provider value={{playerName: location.state.playerName, opponentName: opponentName}}>\n                        <HUD canBet={canBet} setBetAmount={setBetAmount} isOpponentVisible={isOpponentVisible} opponentData={opponentData} playerData={playerData} betController={(val:number) => handleBetController(val)}/>\n                    </NameContext.Provider>\n                    <div className=\"bet-confirm\" style={{opacity: canBet?1:0}}>\n                        <button className=\"btn-bet-confirm\" onClick={placeBet}>CONFIRM</button>\n                    </div>\n                    <Board canMove={canMove} board={board}/>\n                    {\n                    isGameOver && \n                    <>\n                        <Result winner={winner}/>\n                        <button className=\"btn-go-home\" onClick={goHome}>NEW MATCH</button>\n                    </>\n                    }\n                </div>\n\n            }\n        </div>\n    );\n};\n\nexport default Game;","import React from \"react\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport Menu from \"./pages/menu\"\nimport Lobby from \"./pages/lobby\";\nimport Game from \"./pages/game\";\n\n\nconst Routes: React.FC = (props) => {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={Menu} ></Route>\n        <Route exact path=\"/lobby\" component={Lobby} ></Route>\n        <Route exact path=\"/game\" component={Game} ></Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default Routes;\n","import React, { useEffect } from 'react';\nimport Routes from \"./routes\";\n\nimport './App.css';\n\n// import { channel } from './services/network';\n\nconst App: React.FC = () =>  {\n\n  // useEffect(() => {\n  //   channel.join().receive(\"ok\", (msg) => {\n  //     console.log(\"DSB: msg\", msg);\n  //   });\n  // }, [])\n\n  return (\n    <div className=\"App\">\n      <Routes/>\n    </div>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}